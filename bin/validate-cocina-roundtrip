#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../config/environment'

def round_tripped_xml(item)
  title_builder = Cocina::FromFedora::Descriptive::TitleBuilderStrategy.find(label: item.label)
  desc_props = Cocina::FromFedora::Descriptive.props(title_builder: title_builder, mods: item.descMetadata.ng_xml)
  cocina = Cocina::Models::Description.new(desc_props)
  Nokogiri::XML(Cocina::ToFedora::Descriptive.transform(cocina).to_xml)
end

def normalized(ng_xml)
  ng_xml.root.delete('version')
  ng_xml.root.delete('xmlns:xsi')
  ng_xml
end

SAMPLE_SIZE = 100
results = ActiveFedora::SolrService.query('*:*', sort: 'random asc', fl: 'id', rows: SAMPLE_SIZE)
druids = results.map { |r| r['id'] }
counts = { different: 0, success: 0, error: 0 }
druids.each do |druid|
  item = Dor.find(druid)
  original_xml = normalized(item.descMetadata.ng_xml)
  print druid
  result_xml = normalized(round_tripped_xml(item))

  if !EquivalentXml.equivalent?(result_xml, original_xml)
    puts ' is different:'
    puts "Expected: #{original_xml.to_xml}\n"
    puts "Received: #{result_xml.to_xml}\n\n\n"
    counts[:different] += 1
  else
    puts " successfully round tripped.\n\n"
    counts[:success] += 1
  end
rescue StandardError => e
  puts " error. #{e.message}\n\n"
  counts[:error] += 1
end

puts "\nStatus (n=#{SAMPLE_SIZE}):"
puts "  Success:   #{counts[:success]} (#{100 * counts[:success].to_f / SAMPLE_SIZE}%)"
puts "  Different: #{counts[:different]} (#{100 * counts[:different].to_f / SAMPLE_SIZE}%)"
puts "  Error:     #{counts[:error]} (#{100 * counts[:error].to_f / SAMPLE_SIZE}%)"
