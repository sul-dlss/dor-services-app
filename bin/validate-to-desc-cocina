#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../config/environment'
require_relative '../lib/fedora_cache'
require_relative '../lib/data_error_notifier'
require 'optparse'

options = { unique_filename: false, input: 'druids.txt', druids: [] }
parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: bin/validate-to-desc-cocina [options]'

  option_parser.on('-sSAMPLE', '--sample SAMPLE', Integer, 'Sample size, otherwise all druids.')
  option_parser.on('-u', '--unique-filename', 'Result file named for branch and runtime') { options[:unique_filename] = true }
  option_parser.on('-a', '--apo', 'Include APO in report (slower).') { options[:apo] = true }
  option_parser.on('-iFILENAME', '--input FILENAME', String, 'File containing list of druids (instead of druids.txt).')
  option_parser.on('-dDRUIDS', '--druids DRUIDS', Array, 'List of druids (instead of druids.txt).')
  option_parser.on('-h', '--help', 'Displays help.') do
    puts option_parser
    exit
  end
end
parser.parse!(into: options)

cache = FedoraCache.new

def aggregated_errors_for(results_by)
  aggregated_error_results = results_by.to_a
  aggregated_error_results.sort_by! { |result| result[1].size }
  aggregated_error_results.reverse
end

def results_by(results)
  results_by = {}
  results.each do |result|
    results_by[result.msg] = [] unless results_by.key?(result.msg)
    results_by[result.msg] << result.druid
  end
  results_by
end

def print_results(aggregated_error_results, label)
  aggregated_error_results.each do |error_result|
    puts "#{label}: #{error_result[0]} (#{error_result[1].size} errors)\n"
    puts "Examples: #{error_result[1].take(10).join(', ')}"
  end
end

def apo_for(druid)
  puts "Fetching #{druid}"
  Dor.find(druid).admin_policy_object_id
rescue ActiveFedora::ObjectNotFoundError
  'Not found'
end

def write_results(file, aggregated_error_results, label, with_apo)
  aggregated_error_results.each do |error_result|
    file.write("#{label}: #{error_result[0]} (#{error_result[1].size} errors)\n")
    error_result[1].each do |druid|
      file.write(druid)
      file.write(" (APO: #{apo_for(druid)})") if with_apo
      file.write("\n")
    end
  end
end

def summary_line_for(label, count)
  "#{label}: #{count} of #{@sample_size} (#{100 * count.to_f / @sample_size}%)\n"
end

def branch_name
  `git rev-parse --abbrev-ref HEAD`.strip
end

def short_commit_hash
  `git rev-parse --short HEAD`.strip
end

def now_str
  DateTime.now.utc.iso8601.to_s.tr(':', '-')
end

def results_file_name(use_unique_filename)
  return 'results.txt' unless use_unique_filename

  "results_to-cocina_#{now_str}_#{branch_name}_#{short_commit_hash}.txt"
end

if options[:druids].empty?
  druids = File.read(options[:input]).split
  druids = druids.take(options[:sample]) if options[:sample]
else
  druids = options[:druids]
end

@sample_size = druids.size

Result = Struct.new(:druid, :msg, :error_type)

results = Parallel.map(druids, progress: 'Testing') do |druid|
  notifier = DataErrorNotifier.new

  result = cache.label_and_desc_metadata(druid)
  next Result.new(druid, 'Missing', :missing) if result.failure?

  label, mods_xml = result.value!
  mods_ng_xml = Nokogiri::XML(mods_xml)

  title_builder = Cocina::FromFedora::Descriptive::TitleBuilderStrategy.find(label: label)
  desc_props = Cocina::FromFedora::Descriptive.props(title_builder: title_builder, mods: mods_ng_xml, druid: druid, notifier: notifier)
  Cocina::Models::Description.new(desc_props)
  notifier.error? ? Result.new(druid, notifier.data_errors.first.msg, :data_error) : nil
rescue StandardError => e
  Result.new(druid, e.message.gsub('\n', ' '), :to_cocina_error)
end.compact

error_results = results.select { |result| result.error_type == :to_cocina_error }
data_error_results = results.select { |result| result.error_type == :data_error }

counts = { to_cocina_error: 0, missing: 0, data_error: 0 }
results.each { |result| counts[result.error_type] += 1 }

puts summary_line_for('To Cocina error', counts[:to_cocina_error])
puts summary_line_for('Data error', counts[:data_error])
puts summary_line_for('Missing (no descMetadata)', counts[:missing])
puts "\n"

results_by_error = results_by(error_results)
results_by_data_error = results_by(data_error_results)

aggregated_error_results = aggregated_errors_for(results_by_error)
aggregated_data_error_results = aggregated_errors_for(results_by_data_error)

print_results(aggregated_error_results, 'Error')
print_results(aggregated_data_error_results, 'Data error')

File.open(results_file_name(options[:unique_filename]), 'w') do |file|
  file.write(summary_line_for('To Cocina error', counts[:to_cocina_error]))
  file.write(summary_line_for('Data error', counts[:data_error]))
  file.write(summary_line_for('Missing', counts[:missing]))
  file.write("\n")
  write_results(file, aggregated_error_results, 'Error', options[:apo])
  write_results(file, aggregated_data_error_results, 'Data error', options[:apo])
end
