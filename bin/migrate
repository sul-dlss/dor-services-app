#!/usr/bin/env ruby
# frozen_string_literal: true

# Use "export RUBYOPT='-W:no-deprecated -W:no-experimental'" in the shell to silence warnings when script starts

require_relative '../config/environment'
require 'optparse'
require 'tty-progressbar'

options = { druids: [], input: 'druids.txt' }
parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: bin/migrate [options]'

  option_parser.on('-sSAMPLE', '--sample SAMPLE', Integer, 'Sample size, otherwise all druids.')
  option_parser.on('-dDRUIDS', '--druids DRUIDS', Array, 'List of druids (instead of druids.txt).')
  option_parser.on('-iFILENAME', '--input FILENAME', String, 'File containing list of druids (instead of druids.txt).')
  option_parser.on('-h', '--help', 'Displays help.') do
    puts option_parser
    exit
  end
end
parser.parse!(into: options)

results_folder = 'results_migrate'
FileUtils.rm_rf(results_folder)
FileUtils.mkdir_p(results_folder)
@result_file = File.open("#{results_folder}/migrate_results.txt", 'w')

@druids ||= if options[:druids].empty?
              file_druids = File.read(options[:input]).split
              if options[:sample]
                file_druids.take(options[:sample])
              else
                file_druids
              end
            else
              options[:druids]
            end

# how many druids to process as a single advance of the progress bar
def num_for_progress_advance(count)
  return 1 if count < 100

  count / 100
end

def tty_progress_bar(count)
  TTY::ProgressBar.new(
    'Migrating fedora objects to postgres [:bar] (:current/:total, ETA: :eta_time)',
    bar_format: :crate,
    advance: num_for_progress_advance(count),
    total: count
  )
end

def migrate(druid)
  fedora_obj = CocinaObjectStore.new.fedora_find(druid)

  return 'skipped' unless MigrationFilter.migrate?(Nokogiri::XML(fedora_obj.rels_ext.to_rels_ext))

  EventsMigrationService.migrate(fedora_obj)
  VersionMigrationService.migrate(fedora_obj)
  CocinaMigrationService.migrate(fedora_obj)
  'success'
rescue CocinaObjectStore::CocinaObjectNotFoundError
  'missing'
rescue StandardError => e
  puts "ERROR ON #{druid}: #{e}"
  'error'
end

File.open('migration_results.txt', 'w') do |file|
  progress_bar = tty_progress_bar(@druids.size)
  progress_bar.start
  @druids.each_with_index do |druid, index|
    progress_bar.advance(druid: druid)
    result = migrate(druid)
    @result_file.write("#{druid}=#{result}\n")

    file.write("#{druid}=#{result}\n")
  end
end
