#!/usr/bin/env ruby
# frozen_string_literal: true

# Aduits migration of DRO/Collection/AdminPolicy to RepositoryObject.

require_relative '../config/environment'
require 'tty-progressbar'

# how many druids to process as a single advance unit of the progress bar
def num_for_progress_advance(count)
  return 1 if count < 100

  count / 100
end

def on_finish(results, progress_bar)
  progress_bar.advance(results.size)
end

def tty_progress_bar(count, model)
  TTY::ProgressBar.new(
    "#{model} [:bar] (:percent (:current/:total), rate: :rate/s, mean rate: :mean_rate/s, :elapsed total, ETA: :eta_time)",
    bar_format: :crate,
    advance: num_for_progress_advance(count),
    total: count
  )
end

def audit_one(legacy_model)
  model = RepositoryObject.find_by(external_identifier: legacy_model.external_identifier)
  [legacy_model.class.name, legacy_model.external_identifier] unless model && legacy_model.version == model.versions.count && Cocina::Models.without_metadata(legacy_model.to_cocina) == Cocina::Models.without_metadata(model.head_version.to_cocina)
end

def audit_all(ar_class:)
  query = ar_class.all

  progress_bar = tty_progress_bar(query.length, ar_class.name)
  progress_bar.start

  [].tap do |results|
    query.find_in_batches do |group|
      group.map do |record|
        progress_bar.advance
        results << audit_one(record)
      end
    end
  end
end

output = [Dro, Collection, AdminPolicy].each_with_object([]) do |klass, log|
  log.concat(audit_all(ar_class: klass))
end

puts 'Class,External ID'
output.each do |row|
  puts row.join(',')
end
