#!/usr/bin/env ruby
# frozen_string_literal: true

# Migrates from DRO/Collection/AdminPolicy to RepositoryObject.

require_relative '../config/environment'
require 'optparse'
require 'tty-progressbar'

options = { processes: 4 }

parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: bin/migrate-repository-model [options]'
  option_parser.on('-pPROCESSES', '--processes PROCESSES', Integer, "Number of processes. Default is #{options[:processes]}.")
  option_parser.on('-h', '--help', 'Displays help.') do
    puts option_parser
    exit
  end
end

parser.parse!(into: options)

# how many druids to process as a single advance unit of the progress bar
def num_for_progress_advance(count)
  return 1 if count < 100

  count / 100
end

def on_finish(results, progress_bar)
  progress_bar.advance(results.size)
end

def tty_progress_bar(count, model)
  TTY::ProgressBar.new(
    "#{model} [:bar] (:percent (:current/:total), rate: :rate/s, mean rate: :mean_rate/s, :elapsed total, ETA: :eta_time)",
    bar_format: :box,
    advance: num_for_progress_advance(count),
    total: count
  )
end

def migrate(ar_class:, processes:)
  druids = ar_class.pluck(:external_identifier)

  progress_bar = tty_progress_bar(druids.length, ar_class.name)
  progress_bar.start

  Parallel.map(druids.each_slice(100),
               in_processes: processes,
               finish: ->(_, _, results) { on_finish(results, progress_bar) }) do |druids_slice|
    druids_slice.each do |druid|
      next if RepositoryObject.exists?(external_identifier: druid)

      RepositoryObjectMigrator.migrate(external_identifier: druid)
    end
  end
end

[Dro, Collection, AdminPolicy].each do |klass|
  migrate(ar_class: klass, **options)
end
