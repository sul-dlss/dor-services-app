#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../config/environment'
require_relative '../lib/fedora_cache'
require_relative '../lib/fedora_loader'
require_relative '../lib/data_error_notifier'
require 'set'
require 'optparse'
require 'diffy'

options = { random: false, druids: [], fast: false, input: 'druids.txt' }
parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: bin/validate-rights-cocina-roundtrip [options]'

  option_parser.on('-sSAMPLE', '--sample SAMPLE', Integer, 'Sample size, otherwise all druids.')
  option_parser.on('-r', '--random', 'Select random druids.')
  option_parser.on('-dDRUIDS', '--druids DRUIDS', Array, 'List of druids (instead of druids.txt).')
  option_parser.on('-iFILENAME', '--input FILENAME', String, 'File containing list of druids (instead of druids.txt).')
  option_parser.on('-h', '--help', 'Displays help.') do
    puts option_parser
    exit
  end
end
parser.parse!(into: options)

cache = FedoraCache.new
loader = FedoraLoader.new(cache: cache)

Dor::Services::Client.configure(url: Settings.dor_services.url,
                                token: Settings.dor_services.token)

def write_result(druid, original_ng_xml, normalized_original_ng_xml, roundtrip_ng_xml, cocina)
  File.open("results/#{druid}.txt", 'w') do |file|
    file.write("Druid: #{druid}\n\n")

    file.write("Difference:\n#{Diffy::Diff.new("#{normalized_original_ng_xml.to_xml}\n",
                                               "#{roundtrip_ng_xml.to_xml}\n")}\n")

    file.write("\nOriginal XML:\n#{format_xml(original_ng_xml)}\n")
    file.write("\nNormalized original XML:\n#{format_xml(normalized_original_ng_xml)}\n")
    file.write("Roundtripped XML:\n#{format_xml(roundtrip_ng_xml)}\n")
    file.write("Cocina:\n#{JSON.pretty_generate(cocina)}\n\n")
  end
end

def write_error(druid, original_ng_xml, cocina, error)
  File.open("results/#{druid}.txt", 'w') do |file|
    file.write("Druid: #{druid}\n\n")
    file.write("Error: #{error}\n\n")
    file.write("Expected XML:\n#{format_xml(original_ng_xml)}\n\n")
    file.write("Cocina:\n#{JSON.pretty_generate(cocina)}\n\n") if cocina
    file.write("Backtrace:\n")
    file.write(error.backtrace.join("\n"))
  end
end

def format_xml(ng_xml)
  new_ng_xml = Nokogiri::XML(ng_xml.canonicalize) { |config| config.default_xml.noblanks }
  new_ng_xml.to_xml
end

def roundtripped_ng_xml(fedora_obj, cocina_access, cocina_structural)
  Cocina::ToFedora::DROAccess.apply(fedora_obj, cocina_access, cocina_structural)
  fedora_obj.rightsMetadata.ng_xml
end

def validate_druid(druid, loader)
  begin
    fedora_obj = loader.load(druid)
  rescue FedoraLoader::BadCache
    return [druid, :bad_cache]
  rescue FedoraLoader::ExpectedUnmapped
    return [druid, :expected_unmapped]
  rescue FedoraLoader::Unmapped
    return [druid, :unmapped]
  end
  # TODO: Also handle collections.
  return [druid, :not_dro] unless fedora_obj.is_a?(Dor::Item) || fedora_obj.is_a?(Hydrus::Item)

  orig_datastreams = {}
  FedoraCache::DATASTREAMS.each { |dsid| orig_datastreams[dsid] = fedora_obj.datastreams[dsid]&.content }
  return [druid, :missing] unless orig_datastreams['rightsMetadata']

  original_ng_xml = Nokogiri::XML(orig_datastreams['rightsMetadata'])

  begin
    cocina_access_props = Cocina::FromFedora::DROAccess.props(fedora_obj.rightsMetadata, fedora_obj.embargoMetadata)
    cocina_access = Cocina::Models::DROAccess.new(cocina_access_props)

    cocina_structural_props = Cocina::FromFedora::DroStructural.props(fedora_obj,
                                                                      type: Cocina::FromFedora::DRO.dro_type(fedora_obj), notifier: DataErrorNotifier.new)
    cocina_structural = Cocina::Models::DROStructural.new(cocina_structural_props)
  rescue StandardError => e
    write_error(druid, original_ng_xml, cocina_access_props, e)
    return [druid, :to_cocina_error]
  end

  begin
    roundtrip_ng_xml = roundtripped_ng_xml(fedora_obj, cocina_access, cocina_structural)
  rescue StandardError => e
    write_error(druid, original_ng_xml, cocina_access_props, e)
    return [druid, :to_fedora_error]
  end

  begin
    normalized_original_ng_xml = Cocina::Normalizers::RightsNormalizer.normalize(datastream: fedora_obj.datastreams['rightsMetadata'])
  rescue StandardError => e
    write_error(druid, original_ng_xml, cocina_access_props, e)
    return [druid, :rights_normalizer_error]
  end

  return [druid, :success] if EquivalentXml.equivalent?(normalized_original_ng_xml, roundtrip_ng_xml)

  write_result(druid,
               original_ng_xml,
               normalized_original_ng_xml,
               roundtrip_ng_xml,
               cocina_access_props)
  [druid, :different]
end

def percentage(raw_num, denom)
  (100 * raw_num.to_f / denom).round(3)
end

def branch_name
  `git rev-parse --abbrev-ref HEAD`.strip
end

def short_commit_hash
  `git rev-parse --short HEAD`.strip
end

FileUtils.rm_rf('results')
FileUtils.mkdir_p('results')

if options[:druids].empty?
  druids = File.read(options[:input]).split
  druids.shuffle! if options[:random]
  druids = druids.take(options[:sample]) if options[:sample]
else
  druids = options[:druids]
end

puts "On branch name: #{branch_name} (commit: #{short_commit_hash})..."
results = Parallel.map(druids, progress: 'Testing') do |druid|
  validate_druid(druid, loader)
end
counts = { different: 0, success: 0, to_cocina_error: 0, to_fedora_error: 0, rights_normalizer_error: 0, missing: 0,
           not_dro: 0, bad_cache: 0, unmapped: 0, expected_unmapped: 0 }
File.open('results/results.txt', 'w') do |file|
  results.each do |druid, result|
    counts[result] += 1
    file.write("#{druid}=#{result}\n")
  end
end

denom = druids.size - counts[:missing] - counts[:not_dro] - counts[:bad_cache] - counts[:unmapped] - counts[:expected_unmapped]

puts "Status (n=#{druids.size}; not using Missing for success/different/error stats):"
puts "  Success:   #{counts[:success]} (#{percentage(counts[:success], denom)}%)"
puts "  Different: #{counts[:different]} (#{percentage(counts[:different], denom)}%)"
puts "  To Cocina error:     #{counts[:to_cocina_error]} (#{percentage(counts[:to_cocina_error], denom)}%)"
puts "  To Fedora error:     #{counts[:to_fedora_error]} (#{percentage(counts[:to_fedora_error], denom)}%)"
puts "  Missing (no rightsMetadata):     #{counts[:missing]} (#{(100 * counts[:missing].to_f / druids.size).round(3)}%)"
puts "  Rights normalizer error:     #{counts[:rights_normalizer_error]} (#{percentage(
  counts[:rights_normalizer_error], denom
)}%)"
puts "  Not a DRO:     #{counts[:not_dro]} (#{(100 * counts[:not_dro].to_f / druids.size).round(3)}%)"
puts "  Bad cache:     #{counts[:bad_cache]} (#{(100 * counts[:bad_cache].to_f / druids.size).round(3)}%)"
puts "  Unmapped:     #{counts[:unmapped]} (#{(100 * counts[:unmapped].to_f / druids.size).round(3)}%)"
puts "  Expected unmapped:     #{counts[:expected_unmapped]} (#{(100 * counts[:expected_unmapped].to_f / druids.size).round(3)}%)"
