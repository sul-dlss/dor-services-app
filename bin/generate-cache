#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../config/environment'
require_relative '../lib/fedora_cache'
require 'optparse'

options = { overwrite: false, random: false, auto: false, druids: [], input: 'druids.txt', quiet: false, skip: 0 }
parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: bin/generate-cache [options]'

  option_parser.on('-sSAMPLE', '--sample SAMPLE', Integer, 'Sample size, otherwise all druids.')
  option_parser.on('-o', '--overwrite', 'Overwrite cache for item if exists.')
  option_parser.on('-r', '--random', 'Select random druids.')
  option_parser.on('-a', '--auto', 'Automatically choose sample based on 14 day cycle.')
  option_parser.on('-dDRUIDS', '--druids DRUIDS', Array, 'List of druids (instead of druids.txt).')
  option_parser.on('-iINPUT', '--input INPUT', 'Input filename, otherwise druids.txt.')
  option_parser.on('-kSKIP', '--skip SKIP', Integer, 'Number of druids to skip.')
  option_parser.on('-q', '--quiet', 'Do not write logging to STDOUT.')
  option_parser.on('-h', '--help', 'Displays help.') do
    puts option_parser
    exit
  end
end
parser.parse!(into: options)

cache = FedoraCache.new(overwrite: options[:overwrite])

Dor::Services::Client.configure(url: Settings.dor_services.url,
                                token: Settings.dor_services.token)

offset = 1
if options[:druids].empty?
  druids = File.read(options[:input]).split
  if options[:auto]
    sample = Time.zone.today.yday % 14 # 0-13
    sample_size = (druids.size / 14.to_f).ceil
    start = sample * sample_size
    druids = druids.slice(start, sample_size)
    puts "Using druids #{start} to #{start + sample_size} of a total of #{druids.size}"
  else
    druids.shuffle! if options[:random]
    druids = druids.take(options[:sample]) if options[:sample]
    if options[:skip] != 0
      druids = druids.slice(options[:skip]..-1)
      offset += options[:skip]
    end
  end
else
  druids = options[:druids]
end

druids.each_with_index do |druid, index|
  puts "#{druid} (#{index + offset})\n" unless options[:quiet]
  cache.cache(druid)
end
