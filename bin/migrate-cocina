#!/usr/bin/env ruby
# frozen_string_literal: true

# Migrates cocina objects.
# Migration is performed by a Migrator class that is provided as an argument.
# The Migrator class must implement the following methods:
#   initialize(active_record_object)
#   migrate? - true if the object should be migrated
#   migrate - migrates the object and returns the result
#   version? - true if the object should be versioned
#   publish? - true if the object should be published
#   version_description - description for the version (if versioning)
# See app/services/migrators/exemplar.rb for an example.

require_relative '../config/environment'
require 'optparse'
require 'tty-progressbar'

options = { processes: 4, mode: :dryrun, sample: nil }

parser = OptionParser.new do |option_parser|
  option_parser.banner = 'Usage: bin/migrate-cocina MIGRATION_CLASS [options]'
  option_parser.on('--mode [MODE]', %i[commit dryrun migrate verify],
                   'Migration mode (commit, dryrun, migrate, verify). Default is dryrun')
  option_parser.on('-pPROCESSES', '--processes PROCESSES', Integer,
                   "Number of processes. Default is #{options[:processes]}.")
  option_parser.on('-sSAMPLE', '--sample SAMPLE', Integer, 'Sample size per type, otherwise all objects.')
  option_parser.on('-h', '--help', 'Displays help.') do
    puts option_parser
    exit
  end
end

if ARGV.empty?
  puts 'You must provide a migration class'
  puts parser
  exit
end

parser.parse!(into: options)
migrator_class = ARGV.shift

# how many druids to process as a single advance unit of the progress bar
def num_for_progress_advance(count)
  return 1 if count < 100

  count / 100
end

def on_finish(results, progress_bar)
  progress_bar.advance(results.size)
end

def tty_progress_bar(count, mode)
  TTY::ProgressBar.new(
    "#{mode} [:bar] (:percent (:current/:total), rate: :rate/s, mean rate: :mean_rate/s, :elapsed total, " \
    'ETA: :eta_time)',
    bar_format: :box,
    advance: num_for_progress_advance(count),
    total: count
  )
end

def open_version(cocina_object:, version_description:, mode:)
  return cocina_object if VersionService.open?(druid: cocina_object.externalIdentifier)
  # Raise an error if the migration is trying to version an object that is not openable
  raise 'Cannot version' unless VersionService.can_open?(druid: cocina_object.externalIdentifier,
                                                         version: cocina_object.version)
  # This allows us to know if the object can be opened for versioning but not actually open it during a dry run
  return cocina_object if mode == :dryrun

  version_open_params = { description: version_description }
  VersionService.open(cocina_object:, **version_open_params)
end

def close_version(cocina_object:, version_description:)
  version_close_params = { description: version_description }
  VersionService.close(druid: cocina_object.externalIdentifier, version: cocina_object.version, **version_close_params)
end

def perform_migrate(migrator_class:, obj:, mode:)
  migrator = migrator_class.new(obj)

  return [obj.id, obj.external_identifier, migrator.migrate? ? 'ERROR' : 'SUCCESS'] if mode == :verify
  return [obj.id, obj.external_identifier, 'SKIPPED'] unless migrator.migrate?

  current_object_version = obj.head_version.version
  obj = open_version(cocina_object: obj, version_description: migrator.version_description, mode:) if migrator.version?

  migrator.migrate # This is where the actual migration happens

  updated_cocina_object = obj.head_version.to_cocina_with_metadata # This validates the cocina object
  Cocina::ObjectValidator.validate(updated_cocina_object) # This validation is performed by UpdateObjectService.

  ## Note: because we are now storing the cocina for every version we cannot remediate cocina breaking changes for a
  # particular cocina version here.
  if mode == :migrate
    updated_cocina_object = UpdateObjectService.update(updated_cocina_object, skip_open_check: !migrator.version?)
    Publish::MetadataTransferService.publish(druid: obj.external_identifier) if migrator.publish?
    unless updated_cocina_object.version == current_object_version
      close_version(cocina_object: updated_cocina_object,
                    version_description: migrator.version_description)
    end
  elsif mode == :commit
    # For active record migrations, we need to wrap the migration in a transaction and save the object instead of
    # opening/closing versions
    obj.transaction do
      obj.save!
    end
  end
  [obj.id, obj.external_identifier, 'SUCCESS']
rescue Dry::Struct::Error, Cocina::Models::ValidationError, Cocina::ValidationError => e
  [obj.id, obj.external_identifier, 'ERROR', e.message]
end

def druids_for(migrator_class:, sample:)
  druids = migrator_class.druids.presence || RepositoryObject.pluck(:external_identifier)
  sample ? druids.take(sample) : druids
end

def migrate(migrator_class:, sample:, processes:, mode:)
  druids = druids_for(migrator_class:, sample:)

  progress_bar = tty_progress_bar(druids.length, mode)
  progress_bar.start

  Parallel.map(druids.each_slice(100),
               in_processes: processes,
               finish: ->(_, _, results) { on_finish(results, progress_bar) }) do |druids_slice|
    RepositoryObject.where(external_identifier: druids_slice).map do |obj|
      perform_migrate(migrator_class:, obj:, mode:)
    end
  end.flatten(1)
end

CSV.open('migrate-cocina.csv', 'w') do |writer|
  writer << %w[id druid result message]
  migrate(migrator_class: migrator_class.constantize, **options)
    .each do |result|
    writer << result
  end
end
