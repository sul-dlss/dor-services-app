openapi: 3.0.0
info:
  description: Backend API for the Stanford digital repository
  version: 1.0.0
  title: DOR Services API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://dor-services-{env}.stanford.edu'
    description: Production service
    variables:
      env:
        default: prod
  - url: 'https://dor-services-{env}.stanford.edu'
    description: Staging service
    variables:
      env:
        default: stage
tags:
  - name: objects
    description: Digital Repository Objects
  - name: tags
    description: Tags
  - name: integrations
    description: Integrations with other Systems
  - name: jobs
    description: Operations involving background jobs
  - name: versions
    description: Operations about object versions
  - name: events
    description: Operations about events
  - name: files
    description: Operations about files
  - name: workspaces
    description: Operations about workspaces
paths:
  /v1/about:
    get:
      summary: A healthcheck endpoint
      responses:
        '200':
          description: The status of the service
  /v1/catalog/catkey:
    get:
      tags:
        - integrations
      summary: Lookup the catkey for an item given the barcode
      description: ''
      operationId: 'marcxml#catkey'
      responses:
        '200':
          description: OK
      parameters:
        - name: barcode
          in: query
          description: barcode of an item
          required: false
          schema:
            type: string
  /v1/catalog/marcxml:
    get:
      tags:
        - integrations
      summary: Lookup the MARC XML from Symphony
      description: ''
      operationId: 'marcxml#marcxml'
      responses:
        '200':
          description: OK
      parameters:
        - name: barcode
          in: query
          description: barcode of an item
          required: false
          schema:
            type: string
        - name: catkey
          in: query
          description: catalog identifier of an item
          required: false
          schema:
            type: string
  '/v1/background_job_results/{id}':
    get:
      tags:
        - jobs
      summary: View results of a background job
      description: Used to allow the application run long-running processes out of the request/response cycle
      operationId: 'background_job_results#show'
      responses:
        '200':
          description: The background job has completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundJobResultResponse'
        '202':
          description: The background job is pending or processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundJobResultResponse'
        '404':
          description: The background job with the given id was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: id
          in: path
          description: ID of background job result
          required: true
          schema:
            type: integer
  /v1/virtual_objects:
    post:
      tags:
        - objects
      summary: Create a virtual object.
      description: Combines a virtual_object object with constituent objects to create an object like an Atlas (composed of several images)
      operationId: 'virtual_objects#create'
      responses:
        '201':
          description: Virtual merge action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - virtual_objects
              properties:
                virtual_objects:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/VirtualObjectRequest'
  '/v1/objects/{id}/publish':
    post:
      tags:
        - objects
      summary: Publish object to PURL
      description: ''
      operationId: 'objects#publish'
      responses:
        '201':
          description: Publishing action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: workflow
          in: query
          description: which workflow should this be reported to
          schema:
            type: string
            enum:
              - accessionWF
              - releaseWF
            example: releaseWF
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{id}/accession':
    post:
      tags:
        - objects
      summary: Start accessioning or re-accession an object to DOR
      description: ''
      operationId: 'objects#accession'
      responses:
        '201':
          description: Accessioning/re-accessioning started
        '409':
          description: Unable to start accessioning because accessioning has already been started.
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: workflow
          in: query
          description: which workflow should be started
          required: false
          schema:
            type: string
            default: assemblyWF
            enum:
              - accessionWF
              - assemblyWF
            example: assemblyWF
        - name: significance
          in: query
          description: the significance of the version change (if versioning is needed)
          required: false
          schema:
            type: string
            enum:
              - minor
              - major
              - admin
            example: admin
        - name: description
          in: query
          description: the description of the version change (if versioning is needed)
          required: false
          schema:
            type: string
            example: 'Re-accessioning this object'
        - name: opening_user_name
          in: query
          description: the username of the person creating the version (if versioning is needed)
          schema:
            type: string
            example: 'some_sunetid'
  '/v1/objects/{id}/preserve':
    post:
      tags:
        - objects
      summary: Move an object to preservation
      description: ''
      operationId: 'objects#preserve'
      responses:
        '201':
          description: Preservation action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{id}/update_marc_record':
    post:
      tags:
        - integrations
      summary: Update Symphony with a new marc record from DOR
      description: ''
      operationId: 'objects#update_marc_record'
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{id}/update_doi_metadata':
    post:
      tags:
        - integrations
      summary: Update Datacite DOI metadata
      description: 'Starts a background job to do this, from DOI and metadata in the repository'
      operationId: 'objects#update_doi_metadata'
      responses:
        '202':
          description: Accepted
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{id}/unpublish':
    post:
      tags:
        - objects
      summary: Unpublish an object from PURL
      description: ''
      operationId: 'objects#unpublish'
      responses:
        '201':
          description: Unpublish action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: workflow
          in: query
          description: which workflow should this be reported to
          schema:
            type: string
            enum:
              - ????
            example: releaseWF
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{id}/notify_goobi':
    post:
      tags:
        - integrations
      summary: Registers an object with the Goobi server
      description: ''
      operationId: 'objects#notify_goobi'
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/administrative_tags':
    get:
      tags:
        - tags
      summary: Show administrative tags for an object
      description: ''
      operationId: 'administrative_tags#show'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdministrativeTag'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - tags
      summary: Create (or replace) one or more administrative tags
      description: ''
      operationId: 'administrative_tags#create'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found
          content:
            text/plain:
              schema:
                type: string
        '409':
          description: Request would result in a duplicate tag
          content:
            text/plain:
              schema:
                type: string
        '412':
          description: Provided ETag didn't match the previous version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        description: one or more administrative tags for an object
        content:
          application/json:
            schema:
              type: object
              required:
                - administrative_tags
              properties:
                replace:
                  type: boolean
                  default: false
                administrative_tags:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/AdministrativeTag'
  '/v1/administrative_tags/search':
    get:
      tags:
        - tags
      summary: Search for existing tags
      description: 'This is useful for doing autocomplete of tags in Argo'
      operationId: 'administrative_tags#search'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      parameters:
        - name: q
          in: query
          description: The pattern to query for
          required: true
          schema:
            type: string
  '/v1/objects/{object_id}/administrative_tags/{id}':
    delete:
      tags:
        - tags
      summary: Delete an administrative tag for an object
      description: ''
      operationId: 'administrative_tags#destroy'
      responses:
        '204':
          description: Deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object or tag not found
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: id
          in: path
          description: ID of tag to remove
          required: true
          schema:
            $ref: '#/components/schemas/AdministrativeTagEscaped'
    put:
      tags:
        - tags
      summary: Update one administrative tag
      description: ''
      operationId: 'administrative_tags#update (PUT)'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object or tag not found
          content:
            text/plain:
              schema:
                type: string
        '409':
          description: Request would result in a duplicate tag
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: id
          in: path
          description: ID of tag to replace
          required: true
          schema:
            $ref: '#/components/schemas/AdministrativeTagEscaped'
      requestBody:
        description: A replacement administrative tag
        content:
          application/json:
            schema:
              type: object
              required:
                - administrative_tag
              properties:
                administrative_tag:
                  $ref: '#/components/schemas/AdministrativeTag'
    patch:
      tags:
        - tags
      summary: Update one administrative tag
      description: ''
      operationId: 'administrative_tags#update (PATCH)'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object or tag not found
        '409':
          description: Request would result in a duplicate tag
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: id
          in: path
          description: ID of tag to replace
          required: true
          schema:
            $ref: '#/components/schemas/AdministrativeTagEscaped'
      requestBody:
        description: A replacement administrative tag
        content:
          application/json:
            schema:
              type: object
              required:
                - administrative_tag
              properties:
                administrative_tag:
                  $ref: '#/components/schemas/AdministrativeTag'
  '/v1/objects/{id}/apply_admin_policy_defaults':
    post:
      tags:
        - objects
      summary: Applies the default values (copyright, use_statement, rights) from the admin policy
      description: ''
      operationId: 'admin_policy_defaults#apply'
      responses:
        '200':
          description: OK
        '400':
          description: 'The object is not supported for inheritance of APO access defaults because its type is not supported'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
        '422':
          description: 'The object is in a state in which it cannot be modified: it must be either registered or opened for versioning'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{id}/refresh_metadata':
    post:
      tags:
        - integrations
      summary: Update object metadata with marc from Symphony
      description: ''
      operationId: 'metadata_refresh#refresh_metadata'
      responses:
        '200':
          description: OK
        '422':
          description: Unprocessable entity.
        '500':
          description: Internal server error
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/query/collections':
    get:
      tags:
        - objects
      summary: List the collections that an object belongs to
      description: ''
      operationId: 'queries#collections'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/members':
    get:
      tags:
        - objects
      summary: List the members of this collection
      description: ''
      operationId: 'members#index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        externalIdentifier:
                          $ref: '#/components/schemas/Druid'
                        type:
                          type: string
                          nullable: true
                          enum:
                            - 'item'
                            - 'collection'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/workspace':
    delete:
      tags:
        - workspaces
      summary: Remove an object's workspace
      description: ''
      operationId: 'workspaces#destroy'
      responses:
        '200':
          description: OK
        '422':
          description: There was a problem removing the workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - workspaces
      summary: Create a workspace for an object
      description: ''
      operationId: 'workspaces#create'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/workspace/reset':
    post:
      tags:
        - workspaces
      summary: Resets a workspace for an object
      description: After an object has been copied to preservation the workspace can be reset. This is called by the reset-workspace step of the accessionWF
      operationId: 'workspaces#reset'
      responses:
        '204':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/shelve':
    post:
      tags:
        - objects
      summary: Push the item to stacks
      description: ''
      operationId: 'shelves#create'
      responses:
        '201':
          description: Shelving action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
        '422':
          description: 'The object you provided was not a Dor::Item and could not be shelved'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{object_id}/metadata/legacy':
    patch:
      tags:
        - objects
      summary: Update the legacy (datastream) metadata for the object
      description: ''
      operationId: 'metadata#update_legacy_metadata'
      responses:
        '200':
          description: OK
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable when an error occurs saving to Fedora
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLegacyMetadata'
  '/v1/objects/{object_id}/metadata/datastreams':
    get:
      tags:
        - objects
      summary: Retrieve the list of datastreams
      description: 'This is meant to be a temporary API until we can remove the datastream abstraction from the Argo UX'
      operationId: 'datastreams#index'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/metadata/datastreams/{dsid}':
    get:
      tags:
        - objects
      summary: Retrieve the contents of a datastream
      description: 'This is meant to be a temporary API until we can remove the datastream abstraction from the Argo UX'
      operationId: 'datastreams#show'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: dsid
          in: path
          description: ID of datastream
          required: true
          schema:
            type: string
  '/v1/objects/{object_id}/metadata/dublin_core':
    get:
      tags:
        - objects
      summary: Retrieve the public Dublin Core metadata for the object
      description: ''
      operationId: 'metadata#dublin_core'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/metadata/descriptive':
    get:
      tags:
        - objects
      summary: Retrieve the public descriptive (MODS) metadata for the object
      description: ''
      operationId: 'metadata#descriptive'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/metadata/mods':
    get:
      tags:
        - objects
      summary: Retrieve the source MODS metadata for the object
      description: ''
      operationId: 'mods#show'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    put:
      tags:
        - objects
      summary: Update the source MODS metadata for the object
      description: ''
      operationId: 'mods#update'
      responses:
        '204':
          description: The metadata has been updated
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/metadata/public_xml':
    get:
      tags:
        - objects
      summary: Retrieve the full public XML metadata for the object
      description: ''
      operationId: 'metadata#public_xml'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/events':
    get:
      tags:
        - events
      summary: Return a list of events about this object
      description: ''
      operationId: 'events#index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectEvent'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - events
      summary: Create an event about this object
      description: ''
      operationId: 'events#create'
      responses:
        '201':
          description: Created
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        description: event to add to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectEvent'
  '/v1/objects/{object_id}/versions/openable':
    get:
      tags:
        - versions
      summary: Query to determine whether a version can be opened for this object
      description: ''
      operationId: 'versions#openable'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/versions/current':
    get:
      tags:
        - versions
      summary: Return the current version number for this object
      description: ''
      operationId: 'versions#current'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/versions/current/close':
    post:
      tags:
        - versions
      summary: Close the currently open version for this object
      description: ''
      operationId: 'versions#close_current'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: start_accession
          in: query
          schema:
            type: boolean
            default: true
          required: false
          description: Indicates if accessionWF should be started after closing the version
  '/v1/objects/{object_id}/versions':
    get:
      tags:
        - versions
      summary: The version log for this object
      operationId: 'versions#index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionLog'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - versions
      summary: Open a new version for this object
      description: ''
      operationId: 'versions#create'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  /v1/objects:
    post:
      tags:
        - objects
      summary: Register a new object
      description: |-
        If 'collection' is provided, the object will be a member of the provided
        collection.

        Note that the 'source_id' property is required for items but not for
        collections.
      operationId: 'objects#create'
      parameters:
        - in: query
          name: assign_doi
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RequestDRO'
                - $ref: '#/components/schemas/RequestCollection'
                - $ref: '#/components/schemas/RequestAdminPolicy'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DRO'
                  - $ref: '#/components/schemas/Collection'
                  - $ref: '#/components/schemas/AdminPolicy'
          headers:
            ETag:
              schema:
                type: string
            Last-Modified:
              schema:
                type: string
            X-Created-At:
              schema:
                type: string
        '400':
          description: Invalid DOR parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found in DOR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Object with that sourceId already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Roundtrip validation has failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Error connecting to Symphony
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service temporarily disabled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v1/objects/{id}':
    patch:
      tags:
        - objects
      summary: Update object metadata
      description: |-
        Replace the object metadata with the provided metadata.

        The returned Cocina object may differ from the provided Cocina object due to normalization.

        Since we don't presently have a full mapping between cocina JSON and MODS,
        only the title can be updated in the descriptive metadata.
      operationId: 'objects#update'
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        required: true
        content:
          application/json:
            # Note that additionalProperties needs to be set to true to allow id parameter.
            schema:
              oneOf:
                - $ref: '#/components/schemas/DRO'
                - $ref: '#/components/schemas/Collection'
                - $ref: '#/components/schemas/AdminPolicy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DRO'
                  - $ref: '#/components/schemas/Collection'
                  - $ref: '#/components/schemas/AdminPolicy'
          headers:
            ETag:
              schema:
                type: string
            Last-Modified:
              schema:
                type: string
            X-Created-At:
              schema:
                type: string
        '400':
          description: Invalid DOR parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Object not found in DOR
        '409':
          description: Object with that sourceId already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '412':
          description: Roundtrip validation has failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
    get:
      tags:
        - objects
      summary: Retrieve the object COCINA metadata
      description: 'Returns a JSON representation (not yet complete) of an object, collection or admin policy.'
      operationId: 'objects#show'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DRO'
                  - $ref: '#/components/schemas/Collection'
                  - $ref: '#/components/schemas/AdminPolicy'
          headers:
            ETag:
              schema:
                type: string
            Last-Modified:
              schema:
                type: string
            X-Created-At:
              schema:
                type: string
        '304':
          description: No change. The client provided an ETag that matches the current state of the item.                
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    delete:
      tags:
        - objects
      summary: Destroys the object
      description: ''
      operationId: 'objects#destroy'
      responses:
        '201':
          description: Deleted
        '400':
          description: Bad request
        '404':
          description: Object or tag not found
        '500':
          description: Internal Server Error
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
components:
  schemas:
    Access:
      type: object
      oneOf:
        # Being first, makes DarkAccess the default.
        - $ref: '#/components/schemas/DarkAccess'
        - $ref: '#/components/schemas/CitationOnlyAccess'
        - $ref: '#/components/schemas/ControlledDigitalLendingAccess'
        - $ref: '#/components/schemas/LocationBasedAccess'
        - $ref: '#/components/schemas/LocationBasedDownloadAccess'
        - $ref: '#/components/schemas/StanfordAccess'
        - $ref: '#/components/schemas/WorldAccess'
    AccessRole:
      description: Access role conferred by an AdminPolicy to objects within it. (used by Argo)
      type: object
      additionalProperties: false
      properties:
        name:
          description: Name of role
          type: string
          enum:
            - 'dor-apo-creator'
            - 'dor-apo-depositor'
            - 'dor-apo-manager'
            - 'dor-apo-metadata'
            - 'dor-apo-reviewer'
            - 'dor-apo-viewer'
            - 'sdr-administrator'
            - 'sdr-viewer'
            - 'hydrus-collection-creator'
            - 'hydrus-collection-manager'
            - 'hydrus-collection-depositor'
            - 'hydrus-collection-item-depositor'
            - 'hydrus-collection-reviewer'
            - 'hydrus-collection-viewer'
        members:
          description: The users and groups that are members of the role
          type: array
          items:
            $ref: '#/components/schemas/AccessRoleMember'
      required:
        - members
        - name
    AccessRoleMember:
      description: Represents a user or group that is a member of an AccessRole
      type: object
      additionalProperties: false
      properties:
        type:
          description: Name of role
          type: string
          enum:
            - 'sunetid'
            - 'workgroup'
        identifier:
          type: string
      required:
        - identifier
        - type
    Administrative:
      type: object
      additionalProperties: false
      properties:
        hasAdminPolicy:
          $ref: '#/components/schemas/Druid'
        releaseTags:
          description: Tags for release
          type: array
          items:
            $ref: '#/components/schemas/ReleaseTag'
      required:
        - hasAdminPolicy
    AdminPolicy:
      type: object
      additionalProperties: true
      properties:
        cocinaVersion:
          $ref: '#/components/schemas/CocinaVersion'
        type:
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/admin_policy'
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          type: string
        version:
          type: integer
        administrative:
          $ref: '#/components/schemas/AdminPolicyAdministrative'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - cocinaVersion
        - administrative
        - externalIdentifier
        - label
        - type
        - version
    AdminPolicyAdministrative:
      description: Administrative properties for an AdminPolicy
      type: object
      additionalProperties: false
      properties:
        accessTemplate:
          $ref: '#/components/schemas/AdminPolicyAccessTemplate'
        registrationWorkflow:
          description: When you register an item with this admin policy, these are the workflows that are available.
          type: array
          items:
            type: string
        disseminationWorkflow:
          description: An additional workflow to start for objects managed by this admin policy once the end-accession workflow step is complete
          example: wasCrawlPreassemblyWF
          type: string
        collectionsForRegistration:
          description: When you register an item with this admin policy, these are the collections that are available.
          type: array
          items:
            type: string
        hasAdminPolicy:
          $ref: '#/components/schemas/Druid'
        hasAgreement:
          $ref: '#/components/schemas/Druid'
        roles:
          description: The access roles conferred by this AdminPolicy (used by Argo)
          type: array
          items:
            $ref: '#/components/schemas/AccessRole'
      required:
        - hasAdminPolicy
        - hasAgreement
        - accessTemplate
    AdminPolicyAccessTemplate:
      description: 'Provides the template of access settings that is copied to the items goverend by an AdminPolicy. This is almost the same as DROAccess, but it provides no defaults and has no embargo.'
      type: object
      additionalProperties: false
      properties:
        view:
          type: string
          enum:
            - 'world'
            - 'stanford'
            - 'location-based'
            - 'citation-only'
            - 'dark'
        controlledDigitalLending:
          description: Available for controlled digital lending.
          type: boolean
        copyright:
          description: The human readable copyright statement that applies
          example: Copyright World Trade Organization
          type: string
          nullable: true
        download:
          description: >
            Download access level. This is used in the transition from Fedora as
            a way to set a default download level at registration that is copied
            down to all the files.

          type: string
          enum:
            - 'world'
            - 'stanford'
            - 'location-based'
            - 'none'
        location:
          description: >
            If access or download is "location-based", this indicates which
            location should have access. This is used in the transition from
            Fedora as a way to set a default location at registration that is
            copied down to all the files.

          type: string
          nullable: true
          enum:
            - 'spec'
            - 'music'
            - 'ars'
            - 'art'
            - 'hoover'
            - 'm&m'
        useAndReproductionStatement:
          description: The human readable use and reproduction statement that applies
          example: Property rights reside with the repository. Literary rights reside with the creators of the documents or their heirs. To obtain permission to publish or reproduce, please contact the Public Services Librarian of the Dept. of Special Collections (http://library.stanford.edu/spc).
          type: string
          nullable: true
        license:
          description: The license governing reuse of the Collection. Should be an IRI for known licenses (i.e. CC, RightsStatement.org URI, etc.).
          type: string
          nullable: true
    AppliesTo:
      description: Property model for indicating the parts, aspects, or versions of the resource to which a
        descriptive element is applicable.
      type: object
      additionalProperties: false
      properties:
        appliesTo:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveBasicValue"
    Barcode:
      description: 'A barcode'
      oneOf:
        - $ref: '#/components/schemas/BusinessBarcode'
        - $ref: '#/components/schemas/LaneMedicalBarcode'
        - $ref: '#/components/schemas/CatkeyBarcode'
        - $ref: '#/components/schemas/StandardBarcode'
    BusinessBarcode:
      description: The barcode associated with a business library DRO object, prefixed with 2050
      type: string
      pattern: '^2050[0-9]{7}$'
      example: '20503740296'
    LaneMedicalBarcode:
      description: The barcode associated with a Lane Medical Library DRO object, prefixed with 245
      type: string
      pattern: '^245[0-9]{8}$'
      example: '24503259768'
    CatalogLink:
      type: object
      additionalProperties: false
      required:
        - catalog
        - catalogRecordId
      properties:
        catalog:
          description: Catalog that is the source of the linked record.
          type: string
          example: symphony
        catalogRecordId:
          description: Record identifier that is unique within the context of the linked record's catalog.
          type: string
          example: '11403803'
    CatkeyBarcode:
      description: The barcode associated with a DRO object based on catkey, prefixed with 36105
      type: string
      pattern: '^[0-9]+-[0-9]+$'
      example: '6772719-1001'
    CitationOnlyAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          enum:
            - citation-only
        download:
          description: Download access level.
          type: string
          enum:
            - 'none'
        location:
          description: Not used for this access type, must be null.
          type: string
          nullable: true
          enum:
            - null
        controlledDigitalLending:
          type: boolean
          default: false
          enum:
            - false
      required:
        - view
        - download
    CocinaVersion:
      description: The version of Cocina with which this object conforms.
      type: string
      pattern: '^\d+\.\d+\.\d+$'
      example: '1.2.3'
    Collection:
      description: A group of Digital Repository Objects that indicate some type of conceptual grouping within the domain that is worth reusing across the system.
      type: object
      additionalProperties: true
      properties:
        cocinaVersion:
            $ref: '#/components/schemas/CocinaVersion'
        type:
          description: The content type of the Collection. Selected from an established set of values.
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/collection'
            - 'https://cocina.sul.stanford.edu/models/curated-collection'
            - 'https://cocina.sul.stanford.edu/models/user-collection'
            - 'https://cocina.sul.stanford.edu/models/exhibit'
            - 'https://cocina.sul.stanford.edu/models/series'
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          description: Primary processing label (can be same as title) for a Collection.
          type: string
        version:
          description: Version for the Collection within SDR.
          type: integer
        access:
          $ref: '#/components/schemas/CollectionAccess'
        administrative:
          $ref: '#/components/schemas/Administrative'
        description:
          $ref: '#/components/schemas/Description'
        identification:
          $ref: '#/components/schemas/CollectionIdentification'
      required:
        - cocinaVersion
        - description
        - externalIdentifier
        - label
        - type
        - version
        - access
        - administrative
        - identification
    CollectionAccess:
      description: Access metadata for collections
      type: object
      additionalProperties: false
      properties:
        view:
          description: Access level
          type: string
          enum:
            - 'world'
            - 'dark'
          default: 'dark'
        copyright:
          description: The human readable copyright statement that applies
          example: Copyright World Trade Organization
          type: string
          nullable: true
        useAndReproductionStatement:
          description: The human readable use and reproduction statement that applies
          example: Property rights reside with the repository. Literary rights reside with the creators of the documents or their heirs. To obtain permission to publish or reproduce, please contact the Public Services Librarian of the Dept. of Special Collections (http://library.stanford.edu/spc).
          type: string
          nullable: true
        license:
          description: The license governing reuse of the Collection. Should be an IRI for known licenses (i.e. CC, RightsStatement.org URI, etc.).
          type: string
          nullable: true
    CollectionIdentification:
      type: object
      additionalProperties: false
      properties:
        catalogLinks:
          type: array
          items:
            $ref: '#/components/schemas/CatalogLink'
        sourceId:
          $ref: '#/components/schemas/SourceId'
    Contributor:
      description: Property model for describing agents contributing in some way to
        the creation and history of the resource.
      type: object
      additionalProperties: false
      properties:
        name:
          description: Names associated with a contributor.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        type:
          description: Entity type of the contributor (person, organization, etc.).
          type: string
        status:
          description: Status of the contributor relative to other parallel contributors
            (e.g. the primary author among a group of contributors).
          type: string
        role:
          description: Relationships of the contributor to the resource or to an event
            in its history.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        identifier:
          description: Identifiers and URIs associated with the contributor entity.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        note:
          description: Other information associated with the contributor.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        valueAt:
          description: URL or other pointer to the location of the contributor information.
          type: string
        parallelContributor:
          description: For multiple representations of information about the same contributor (e.g. in different languages).
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveParallelContributor"
    ControlledDigitalLendingAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          enum:
            - stanford
        download:
          description: Download access level.
          type: string
          enum:
            - none
        location:
          description: Not used for this access type, must be null.
          type: string
          nullable: true
          enum:
            - null
        controlledDigitalLending:
          description: Available for controlled digital lending.
          type: boolean
          default: false
      required:
        - view
        - download
        - controlledDigitalLending
    DarkAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          default: 'dark'
          enum:
            - dark
        download:
          description: Download access level.
          type: string
          default: 'none'
          enum:
            - 'none'
        location:
          description: If access is "location-based", which location should have access.
          type: string
          nullable: true
          default: null
          enum:
            - null
        controlledDigitalLending:
          type: boolean
          default: false
          enum:
            - false
    Description:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/RequestDescription"
        - type: object
          additionalProperties: false
          properties:
            purl:
              $ref: "#/components/schemas/Purl"
          required:
            - purl
    DescriptiveAccessMetadata:
      description: Information about how to access digital and physical versions of the object.
      type: object
      additionalProperties: false
      properties:
        url:
          description: URLs where the resource may be accessed in full or part.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        physicalLocation:
          description: Location of a physical version of the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        digitalLocation:
          description: Location of a digital version of the resource, such as a file path for a born digital resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        accessContact:
          description: The library, organization, or person responsible for access to the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        digitalRepository:
          description: The digital repositories that hold the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        note:
          description: Other information related to accessing the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveAdminMetadata:
      description: Information about this resource description.
      type: object
      additionalProperties: false
      properties:
        contributor:
          description: Contributors to this resource description.
          type: array
          items:
            $ref: "#/components/schemas/Contributor"
        event:
          description: Events in the history of this resource description.
          type: array
          items:
            $ref: "#/components/schemas/Event"
        language:
          description: Languages, scripts, symbolic systems, and notations used
            in this resource description.
          type: array
          items:
            $ref: "#/components/schemas/Language"
        note:
          description: Other information related to this resource description.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        metadataStandard:
          description: Descriptive or content standard(s) to which this resource description conforms.
          type: array
          items:
            $ref: "#/components/schemas/Standard"
        identifier:
          description: Identifiers associated with this resource description.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveBasicValue:
      description: Basic value model for descriptive elements.
      type: object
      # additionalProperties breaks the validator, unclear as to why.
      # additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveStructuredValue"
        - $ref: "#/components/schemas/DescriptiveParallelValue"
        - $ref: "#/components/schemas/DescriptiveGroupedValue"
        - type: object
          # additionalProperties breaks the validator for DescriptiveValue, unclear as to why.
          # additionalProperties: false
          properties:
            value:
              description: String or integer value of the descriptive element.
              oneOf:
                - type: string
              # Title note (nonsorting character count) was supposed to be able to accept an integer value,
              # but this triggered a bug in committee:
              # https://github.com/interagent/committee/issues/286
              # - type: integer
            type:
              description: Type of value provided by the descriptive element.
              type: string
            status:
              description: Status of the descriptive element value relative to other instances
                of the element.
              type: string
            code:
              description: Code value of the descriptive element.
              type: string
            uri:
              description: URI value of the descriptive element.
              type: string
              format: uri
            standard:
              # description: Descriptive or content standard to which the value conforms.
              $ref: "#/components/schemas/Standard"
            encoding:
              # description: Encoding schema, standard, or syntax to which the value conforms.
              $ref: "#/components/schemas/Standard"
            identifier:
              description: Identifiers and URIs associated with the descriptive element.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            source:
              $ref: "#/components/schemas/Source"
            displayLabel:
              description: The preferred display label to use for the descriptive element in access systems.
              type: string
            qualifier:
              description: A term providing information about the circumstances of the statement (e.g., approximate dates).
              type: string
            note:
              description: Other information related to the descriptive element.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            valueLanguage:
              $ref: "#/components/schemas/DescriptiveValueLanguage"
            valueAt:
              description: URL or other pointer to the location of the value of the descriptive element.
              type: string
    DescriptiveGeographicMetadata:
      description: Value model for mods geographic extension metadata
      type: object
      additionalProperties: false
      properties:
        form:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        subject:
          description: Terms associated with the intellectual content of the related resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveGroupedValue:
      description: Value model for a set of descriptive elements grouped together in an unstructured way.
      type: object
      additionalProperties: false
      properties:
        groupedValue:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveParallelContributor:
      description: Value model for multiple representations of information about the same contributor (e.g. in different languages).
      type: object
      additionalProperties: false
      properties:
        name:
          description: Names associated with a contributor.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        type:
          description: Entity type of the contributor (person, organization, etc.).
          type: string
        status:
          description: Status of the contributor relative to other parallel contributors (e.g. the primary author among a group of contributors).
          type: string
        role:
          description: Relationships of the contributor to the resource or to an event in its history.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        identifier:
          description: Identifiers and URIs associated with the contributor entity.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        note:
          description: Other information associated with the contributor.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        valueAt:
          description: URL or other pointer to the location of the contributor information.
          type: string
        valueLanguage:
          # description: Language of the descriptive element value
          $ref: "#/components/schemas/DescriptiveValueLanguage"
    DescriptiveParallelEvent:
      description: Value model for multiple representations of information about the same event (e.g. in different languages).
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveStructuredValue"
        - type: object
          additionalProperties: false
          properties:
            type:
              description: Description of the event (creation, publication, etc.).
              type: string
            displayLabel:
              description: The preferred display label to use for the event in access systems.
              type: string
            date:
              description: Dates associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            contributor:
              description: Contributors associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/Contributor"
            location:
              description: Locations associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            identifier:
              description: Identifiers and URIs associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            note:
              description: Other information about the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            valueLanguage:
              # description: Language of the descriptive element value
              $ref: "#/components/schemas/DescriptiveValueLanguage"
    DescriptiveParallelValue:
      description: Value model for multiple representations of the same information (e.g. in different languages).
      type: object
      additionalProperties: false
      properties:
        parallelValue:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveStructuredValue:
      description: Value model for descriptive elements structured as typed, ordered values.
      type: object
      additionalProperties: false
      properties:
        structuredValue:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveValue:
      description: Default value model for descriptive elements.
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveBasicValue"
        - $ref: "#/components/schemas/AppliesTo"
    DescriptiveValueLanguage:
      description: Language of the descriptive element value
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/Standard"
        - type: object
          properties:
            valueScript:
              $ref: '#/components/schemas/Standard'
              # description: An alphabet or other notation used to represent a
              #   language or other symbolic system of the descriptive element value.
    DOI:
      type: string
      description: Digital Object Identifier (https://www.doi.org)
      pattern: '^10\.(25740|80343)\/[b-df-hjkmnp-tv-z]{2}[0-9]{3}[b-df-hjkmnp-tv-z]{2}[0-9]{4}$'
      example: '10.25740/bc123df4567'
    DRO:
      description: Domain-defined abstraction of a 'work'. Digital Repository Objects' abstraction is describable for our domain’s purposes, i.e. for management needs within our system.
      type: object
      additionalProperties: true
      properties:
        cocinaVersion:
          $ref: '#/components/schemas/CocinaVersion'
        type:
          description: The content type of the DRO. Selected from an established set of values.
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/object'
            - 'https://cocina.sul.stanford.edu/models/3d'
            - 'https://cocina.sul.stanford.edu/models/agreement'
            - 'https://cocina.sul.stanford.edu/models/book'
            - 'https://cocina.sul.stanford.edu/models/document'
            - 'https://cocina.sul.stanford.edu/models/geo'
            - 'https://cocina.sul.stanford.edu/models/image'
            - 'https://cocina.sul.stanford.edu/models/page'
            - 'https://cocina.sul.stanford.edu/models/photograph'
            - 'https://cocina.sul.stanford.edu/models/manuscript'
            - 'https://cocina.sul.stanford.edu/models/map'
            - 'https://cocina.sul.stanford.edu/models/media'
            - 'https://cocina.sul.stanford.edu/models/track'
            - 'https://cocina.sul.stanford.edu/models/webarchive-binary'
            - 'https://cocina.sul.stanford.edu/models/webarchive-seed'
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          description: Primary processing label (can be same as title) for a DRO.
          type: string
        version:
          description: Version for the DRO within SDR.
          type: integer
        access:
          $ref: '#/components/schemas/DROAccess'
        administrative:
          $ref: '#/components/schemas/Administrative'
        description:
          $ref: '#/components/schemas/Description'
        identification:
          $ref: '#/components/schemas/Identification'
        structural:
          $ref: '#/components/schemas/DROStructural'
        geographic:
          $ref: '#/components/schemas/Geographic'
      required:
        - cocinaVersion
        - access
        - administrative
        - description
        - externalIdentifier
        - label
        - type
        - version
        - identification
        - structural
    DROAccess:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/Access"
        - type: object
          properties:
            copyright:
              description: The human readable copyright statement that applies
              example: Copyright World Trade Organization
              type: string
              nullable: true
            embargo:
              $ref: '#/components/schemas/Embargo'
            useAndReproductionStatement:
              description: The human readable use and reproduction statement that applies
              example: Property rights reside with the repository. Literary rights reside with the creators of the documents or their heirs. To obtain permission to publish or reproduce, please contact the Public Services Librarian of the Dept. of Special Collections (http://library.stanford.edu/spc).
              type: string
              nullable: true
            license:
              description: The license governing reuse of the DRO. Should be an IRI for known licenses (i.e. CC, RightsStatement.org URI, etc.).
              type: string
              nullable: true
              enum:
                - 'https://www.gnu.org/licenses/agpl.txt'
                - 'https://www.apache.org/licenses/LICENSE-2.0'
                - 'https://opensource.org/licenses/BSD-2-Clause'
                - 'https://opensource.org/licenses/BSD-3-Clause'
                - 'https://creativecommons.org/licenses/by/4.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nc/4.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nc-sa/4.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nd/4.0/legalcode'
                - 'https://creativecommons.org/licenses/by-sa/4.0/legalcode'
                - 'https://creativecommons.org/publicdomain/zero/1.0/legalcode'
                - 'https://opensource.org/licenses/cddl1'
                - 'https://www.eclipse.org/legal/epl-2.0'
                - 'https://www.gnu.org/licenses/gpl-3.0-standalone.html'
                - 'https://www.isc.org/downloads/software-support-policy/isc-license/'
                - 'https://www.gnu.org/licenses/lgpl-3.0-standalone.html'
                - 'https://opensource.org/licenses/MIT'
                - 'https://www.mozilla.org/MPL/2.0/'
                - 'https://opendatacommons.org/licenses/by/1-0/'
                - 'http://opendatacommons.org/licenses/odbl/1.0/' # Non cannonical, but in some of our data
                - 'https://opendatacommons.org/licenses/odbl/1-0/'
                - 'https://creativecommons.org/publicdomain/mark/1.0/'
                - 'https://opendatacommons.org/licenses/pddl/1-0/'
                - 'https://creativecommons.org/licenses/by/3.0/legalcode'
                - 'https://creativecommons.org/licenses/by-sa/3.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nd/3.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nc/3.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nc-sa/3.0/legalcode'
                - 'https://creativecommons.org/licenses/by-nc-nd/3.0/legalcode'
                - 'https://cocina.sul.stanford.edu/licenses/none' # Only used in some legacy ETDs and not actually permitted per the Project Chimera docs.
    DROStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          description: Filesets that contain the digital representations (Files)
          type: array
          items:
            $ref: '#/components/schemas/FileSet'
        hasMemberOrders:
          description: Provided sequences or orderings of members, including some metadata about each sequence (i.e. sequence label, sequence type, if the sequence is primary, etc.).
          type: array
          items:
            $ref: '#/components/schemas/Sequence'
        isMemberOf:
          description: Collections that this DRO is a member of
          type: array
          items:
            $ref: '#/components/schemas/Druid'
    Druid:
      type: string
      pattern: '^druid:[b-df-hjkmnp-tv-z]{2}[0-9]{3}[b-df-hjkmnp-tv-z]{2}[0-9]{4}$'
      example: 'druid:bc123df4567'
    Embargo:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/Access"
        - type: object
          properties:
            releaseDate:
              description: Date when the Collection is released from an embargo.
              type: string
              format: date-time
              example: '2029-06-22T07:00:00.000+00:00'
            useAndReproductionStatement:
              description: The human readable use and reproduction statement that applies when the embargo expires.
              example: These materials are in the public domain.
              type: string
              nullable: true
          required:
            - releaseDate
    Event:
      description: Property model for describing events in the history of the resource.
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveStructuredValue"
        - type: object
          additionalProperties: false
          properties:
            type:
              description: Description of the event (creation, publication, etc.).
              type: string
            displayLabel:
              description: The preferred display label to use for the event in access systems.
              type: string
            date:
              description: Dates associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            contributor:
              description: Contributors associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/Contributor"
            location:
              description: Locations associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            identifier:
              description: Identifiers and URIs associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            note:
              description: Other information about the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            valueLanguage:
              # description: Language of the descriptive element value
              $ref: "#/components/schemas/DescriptiveValueLanguage"
            parallelEvent:
              description: For multiple representations of information about the same event (e.g. in different languages)
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveParallelEvent"
    File:
      description: Binaries that are the basis of what our domain manages. Binaries here do not include metadata files generated for the domain's own management purposes.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The content type of the File.
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/file'
        externalIdentifier:
          description: Identifier for the resource within the SDR architecture but outside of the repository. UUID. Constant across resource versions. What clients will use calling the repository.
          type: string
        label:
          description: Primary processing label (can be same as title) for a File.
          type: string
        filename:
          description: Filename for a file. Can be same as label.
          type: string
        size:
          description: Size of the File (binary) in bytes.
          type: integer
        version:
          description: Version for the File within SDR.
          type: integer
        hasMimeType:
          description: MIME Type of the File.
          type: string
        use:
          description: Use for the File.
          type: string
        hasMessageDigests:
          type: array
          items:
            $ref: '#/components/schemas/MessageDigest'
        access:
          $ref: '#/components/schemas/FileAccess'
        administrative:
          $ref: '#/components/schemas/FileAdministrative'
        presentation:
          $ref: '#/components/schemas/Presentation'
      required:
        - externalIdentifier
        - label
        - filename
        - type
        - version
        - access
        - administrative
        - hasMessageDigests
    FileAccess:
      description: Access metadata for files
      type: object
      additionalProperties: false
      oneOf:
        # Being first, makes DarkAccess the default.
        - $ref: '#/components/schemas/DarkAccess'
        - $ref: '#/components/schemas/ControlledDigitalLendingAccess'
        - $ref: '#/components/schemas/LocationBasedAccess'
        - $ref: '#/components/schemas/LocationBasedDownloadAccess'
        - $ref: '#/components/schemas/StanfordAccess'
        - $ref: '#/components/schemas/WorldAccess'
    FileAdministrative:
      type: object
      additionalProperties: false
      properties:
        publish:
          type: boolean
          default: false
        sdrPreserve:
          type: boolean
          default: true
        shelve:
          type: boolean
          default: false
      required:
        - publish
        - sdrPreserve
        - shelve
    FileSet:
      description: Relevant groupings of Files. Also called a File Grouping.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The content type of the Fileset.
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/resources/audio'
            - 'https://cocina.sul.stanford.edu/models/resources/attachment'
            - 'https://cocina.sul.stanford.edu/models/resources/document'
            - 'https://cocina.sul.stanford.edu/models/resources/file'
            - 'https://cocina.sul.stanford.edu/models/resources/image'
            - 'https://cocina.sul.stanford.edu/models/resources/main-augmented'
            - 'https://cocina.sul.stanford.edu/models/resources/main-original'
            - 'https://cocina.sul.stanford.edu/models/resources/media'
            - 'https://cocina.sul.stanford.edu/models/resources/object'
            - 'https://cocina.sul.stanford.edu/models/resources/page'
            - 'https://cocina.sul.stanford.edu/models/resources/permissions'
            - 'https://cocina.sul.stanford.edu/models/resources/preview'
            - 'https://cocina.sul.stanford.edu/models/resources/supplement'
            - 'https://cocina.sul.stanford.edu/models/resources/3d'
            - 'https://cocina.sul.stanford.edu/models/resources/thumb'
            - 'https://cocina.sul.stanford.edu/models/resources/video'
        externalIdentifier:
          type: string
        label:
          description: Primary processing label for a Fileset.
          type: string
        version:
          description: Version for the Fileset within SDR.
          type: integer
        structural:
          $ref: '#/components/schemas/FileSetStructural'
      required:
        - externalIdentifier
        - label
        - type
        - version
        - structural
    FileSetStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          type: array
          items:
            $ref: '#/components/schemas/File'
    Geographic:
      description: Geographic metadata
      type: object
      additionalProperties: false
      properties:
        iso19139:
          description: Geographic ISO 19139 XML metadata
          type: string
      required:
        - iso19139
    Identification:
      type: object
      additionalProperties: false
      properties:
        barcode:
          $ref: '#/components/schemas/Barcode'
        catalogLinks:
          type: array
          items:
            $ref: '#/components/schemas/CatalogLink'
        doi:
          $ref: '#/components/schemas/DOI'
        sourceId:
          $ref: '#/components/schemas/SourceId'
    Language:
      description: Languages, scripts, symbolic systems, and notations used in all
        or part of a resource or its descriptive metadata.
      type: object
      additionalProperties: false
      properties:
        appliesTo:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveBasicValue"
        code:
          description: Code value of the descriptive element.
          type: string
        displayLabel:
          description: The preferred display label to use for the descriptive element in access systems.
          type: string
        encoding:
          # description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          $ref: "#/components/schemas/Standard"
        groupedValue:
          description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        note:
          description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        parallelValue:
          description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        qualifier:
          type: string
          description: present for mapping to additional schemas in the future and for consistency but not otherwise used
        script:
          $ref: '#/components/schemas/DescriptiveValue'
          # description: An alphabet or other notation used to represent a
          #   language or other symbolic system associated with the resource.
        source:
          $ref: "#/components/schemas/Source"
        status:
          description: Status of the language relative to other parallel language elements (e.g. the primary language)
          type: string
          enum:
            - primary
        standard:
          # description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          $ref: "#/components/schemas/Standard"
        structuredValue:
          description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        uri:
          description: URI value of the descriptive element.
          type: string
          format: uri
        value:
          description: Value of the descriptive element.
          type: string
        valueAt:
          description: URL or other pointer to the location of the language information.
          type: string
        valueLanguage:
          # description: present for mapping to additional schemas in the future and for consistency but not otherwise used
          $ref: "#/components/schemas/DescriptiveValueLanguage"
    LocationBasedAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          enum:
            - location-based
        download:
          description: Download access level.
          type: string
          enum:
            - location-based
            - none
        location:
          description: If access or download is "location-based", which location should have access.
          type: string
          enum:
            - 'spec'
            - 'music'
            - 'ars'
            - 'art'
            - 'hoover'
            - 'm&m'
        controlledDigitalLending:
          type: boolean
          default: false
          enum:
            - false
      required:
        - view
        - download
        - location
    LocationBasedDownloadAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          enum:
            - stanford
            - world
        download:
          description: Download access level.
          type: string
          enum:
            - location-based
        location:
          description: Which location should have download access.
          type: string
          enum:
            - 'spec'
            - 'music'
            - 'ars'
            - 'art'
            - 'hoover'
            - 'm&m'
        controlledDigitalLending:
          type: boolean
          default: false
          enum:
            - false
      required:
        - view
        - download
        - location
    MessageDigest:
      description: The output of the message digest algorithm.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The algorithm that was used
          type: string
          enum:
            - md5
            - sha1
        digest:
          description: The digest value hexidecimal encoded
          type: string
      required:
        - type
        - digest
    Presentation:
      description: Presentation data for the File.
      type: object
      additionalProperties: false
      properties:
        height:
          description: Height in pixels
          type: integer
        width:
          description: Width in pixels
          type: integer
    Purl:
      description: Stanford persistent URL associated with the related resource. Note this is http, not https.
      type: string
      format: uri
      # Canonical URI is https
      pattern: '^https:\/\/'
    RelatedResource:
      description: Other resource associated with the described resource.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The relationship of the related resource to the described resource.
          type: string
        status:
          description: Status of the related resource relative to other related resources.
          type: string
        displayLabel:
          description: The preferred display label to use for the related resource in access systems.
          type: string
        title:
          description: Titles of the related resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        contributor:
          description: Agents contributing in some way to the creation and history of the
            related resource.
          type: array
          items:
            $ref: "#/components/schemas/Contributor"
        event:
          description: Events in the history of the related resource.
          type: array
          items:
            $ref: "#/components/schemas/Event"
        form:
          description: Characteristics of the related resource's physical, digital, and intellectual
            form and genre, and of its process of creation.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        language:
          description: Languages, scripts, symbolic systems, and notations used in all or
            part of a related resource.
          type: array
          items:
            $ref: "#/components/schemas/Language"
        note:
          description: Additional information relevant to a related resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        identifier:
          description: Identifiers and URIs associated with the related resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        standard:
          # description: Descriptive or content standards to which the value conforms.
          $ref: "#/components/schemas/Standard"
        subject:
          description: Terms associated with the intellectual content of the related resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        purl:
          $ref: "#/components/schemas/Purl"
        access:
          $ref: "#/components/schemas/DescriptiveAccessMetadata"
        relatedResource:
          description: Other resources associated with the related resource.
          type: array
          items:
            $ref: "#/components/schemas/RelatedResource"
        adminMetadata:
          $ref: "#/components/schemas/DescriptiveAdminMetadata"
        version:
          description: The version of the related resource.
          type: string
        valueAt:
          description: URL or other pointer to the location of the related resource information.
          type: string
    ReleaseTag:
      description: A tag that indicates the item or collection should be released.
      type: object
      additionalProperties: true
      required:
        - release
      properties:
        who:
          description: Who did this release
          type: string
          example: petucket
        what:
          description: What is being released. This item or the whole collection.
          type: string
          enum:
            - self
            - collection
          example: self
        date:
          description: When did this action happen
          type: string
          format: date-time
        to:
          description: What platform is it released to
          type: string
          example: Searchworks
        release:
          type: boolean
    RequestAdministrative:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/Administrative"
        - type: object
          additionalProperties: false
          properties:
            partOfProject:
              description: Internal project this resource is a part of. This governs routing of messages about this object.
              example: Google Books
              type: string          
    RequestAdminPolicy:
      description: Same as an AdminPolicy, but doesn't have an externalIdentifier as one will be created
      type: object
      additionalProperties: false
      properties:
        cocinaVersion:
          $ref: '#/components/schemas/CocinaVersion'
        type:
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/admin_policy'
        label:
          type: string
        version:
          type: integer
          default: 1
          enum:
            - 1
        administrative:
          $ref: '#/components/schemas/AdminPolicyAdministrative'
        description:
          $ref: '#/components/schemas/RequestDescription'
      required:
        - cocinaVersion
        - administrative
        - label
        - type
        - version
    RequestCollection:
      description: Same as a Collection, but doesn't have an externalIdentifier as one will be created
      type: object
      additionalProperties: false
      properties:
        cocinaVersion:
          $ref: '#/components/schemas/CocinaVersion'
        type:
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/collection'
            - 'https://cocina.sul.stanford.edu/models/curated-collection'
            - 'https://cocina.sul.stanford.edu/models/user-collection'
            - 'https://cocina.sul.stanford.edu/models/exhibit'
            - 'https://cocina.sul.stanford.edu/models/series'
        label:
          type: string
        version:
          type: integer
          default: 1
          enum:
            - 1
        access:
          $ref: '#/components/schemas/CollectionAccess'
        administrative:
          $ref: '#/components/schemas/RequestAdministrative'
        description:
          $ref: '#/components/schemas/RequestDescription'
        identification:
          $ref: '#/components/schemas/CollectionIdentification'
      required:
        - cocinaVersion
        - access
        - administrative
        - label
        - type
        - version
    RequestDescription:
      description: Description that is included in a request to create a DRO. This is the same as a Description, except excludes PURL.
      type: object
      additionalProperties: false
      properties:
        title:
          description: Titles of the resource.
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Title"
        contributor:
          description: Agents contributing in some way to the creation and history of the
            resource.
          type: array
          items:
            $ref: "#/components/schemas/Contributor"
        event:
          description: Events in the history of the resource.
          type: array
          items:
            $ref: "#/components/schemas/Event"
        form:
          description: Characteristics of the resource's physical, digital, and intellectual
            form and genre, and of its process of creation.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        geographic:
          description: Geographic description for items with coordinates or bounding boxes.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveGeographicMetadata"
        language:
          description: Languages, scripts, symbolic systems, and notations used in all or
            part of a resource.
          type: array
          items:
            $ref: "#/components/schemas/Language"
        note:
          description: Additional information relevant to a resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        identifier:
          description: Identifiers and URIs associated with the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        subject:
          description: Terms associated with the intellectual content of the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        access:
          $ref: "#/components/schemas/DescriptiveAccessMetadata"
        relatedResource:
          description: Other resources associated with the described resource.
          type: array
          items:
            $ref: "#/components/schemas/RelatedResource"
        marcEncodedData:
          description: Data about the resource represented in MARC fixed fields and codes.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        adminMetadata:
          $ref: "#/components/schemas/DescriptiveAdminMetadata"
        valueAt:
          description: URL or other pointer to the location of the resource description.
          type: string
      required:
        - title
    RequestDRO:
      description: A request to create a DRO.  This has the same general structure as a DRO but doesn't have externalIdentifier and doesn't require the access subschema. If no access subschema is provided, these values will be inherited from the AdminPolicy.
      type: object
      # There is a bug in Committee (https://github.com/interagent/committee/issues/328) that causes validation errors when
      # validating a request that has query parameters and a request body.
      # Since POST /v1/objects has both, setting additionalProperties to true.
      additionalProperties: true
      properties:
        cocinaVersion:
          $ref: '#/components/schemas/CocinaVersion'
        type:
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/object'
            - 'https://cocina.sul.stanford.edu/models/3d'
            - 'https://cocina.sul.stanford.edu/models/agreement'
            - 'https://cocina.sul.stanford.edu/models/book'
            - 'https://cocina.sul.stanford.edu/models/document'
            - 'https://cocina.sul.stanford.edu/models/geo'
            - 'https://cocina.sul.stanford.edu/models/image'
            - 'https://cocina.sul.stanford.edu/models/page'
            - 'https://cocina.sul.stanford.edu/models/photograph'
            - 'https://cocina.sul.stanford.edu/models/manuscript'
            - 'https://cocina.sul.stanford.edu/models/map'
            - 'https://cocina.sul.stanford.edu/models/media'
            - 'https://cocina.sul.stanford.edu/models/track'
            - 'https://cocina.sul.stanford.edu/models/webarchive-binary'
            - 'https://cocina.sul.stanford.edu/models/webarchive-seed'
        label:
          type: string
        version:
          type: integer
          default: 1
          enum:
            - 1
        access:
          $ref: '#/components/schemas/DROAccess'
        administrative:
          $ref: '#/components/schemas/RequestAdministrative'
        description:
          $ref: '#/components/schemas/RequestDescription'
        identification:
          $ref: '#/components/schemas/RequestIdentification'
        structural:
          $ref: '#/components/schemas/RequestDROStructural'
        geographic:
          $ref: '#/components/schemas/Geographic'
      required:
        - cocinaVersion
        - administrative
        - identification
        - label
        - type
        - version
    RequestDROStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          type: array
          items:
            $ref: '#/components/schemas/RequestFileSet'
        hasMemberOrders:
          type: array
          items:
            $ref: '#/components/schemas/Sequence'
        isMemberOf:
          description: Collections that this DRO is a member of
          type: array
          items:
            $ref: '#/components/schemas/Druid'
    RequestFile:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/file'
        label:
          type: string
        filename:
          type: string
        size:
          type: integer
        version:
          type: integer
        hasMimeType:
          type: string
        externalIdentifier:
          type: string
        use:
          type: string
        hasMessageDigests:
          type: array
          items:
            $ref: '#/components/schemas/MessageDigest'
        access:
          $ref: '#/components/schemas/FileAccess'
        administrative:
          $ref: '#/components/schemas/FileAdministrative'
        presentation:
          $ref: '#/components/schemas/Presentation'
      required:
        - label
        - type
        - version
        - filename
        - access
        - administrative
        - hasMessageDigests
    RequestFileSet:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'https://cocina.sul.stanford.edu/models/resources/audio'
            - 'https://cocina.sul.stanford.edu/models/resources/attachment'
            - 'https://cocina.sul.stanford.edu/models/resources/document'
            - 'https://cocina.sul.stanford.edu/models/resources/file'
            - 'https://cocina.sul.stanford.edu/models/resources/image'
            - 'https://cocina.sul.stanford.edu/models/resources/main-augmented'
            - 'https://cocina.sul.stanford.edu/models/resources/main-original'
            - 'https://cocina.sul.stanford.edu/models/resources/media'
            - 'https://cocina.sul.stanford.edu/models/resources/object'
            - 'https://cocina.sul.stanford.edu/models/resources/page'
            - 'https://cocina.sul.stanford.edu/models/resources/permissions'
            - 'https://cocina.sul.stanford.edu/models/resources/preview'
            - 'https://cocina.sul.stanford.edu/models/resources/supplement'
            - 'https://cocina.sul.stanford.edu/models/resources/3d'
            - 'https://cocina.sul.stanford.edu/models/resources/thumb'
            - 'https://cocina.sul.stanford.edu/models/resources/video'
        label:
          type: string
        version:
          type: integer
        structural:
          $ref: '#/components/schemas/RequestFileSetStructural'
      required:
        - label
        - type
        - version
        - structural
    RequestFileSetStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          type: array
          items:
            $ref: '#/components/schemas/RequestFile'
    RequestIdentification:
      description: Same as a Identification, but requires a sourceId.
      type: object
      additionalProperties: false
      properties:
        barcode:
          $ref: '#/components/schemas/Barcode'
        catalogLinks:
          type: array
          items:
            $ref: '#/components/schemas/CatalogLink'
        sourceId:
          $ref: '#/components/schemas/SourceId'
      required:
        - sourceId
    Sequence:
      description: A sequence or ordering of resources within a Collection or Object.
      type: object
      additionalProperties: false
      properties:
        members:
          description: "Identifiers for Members in their stated Order for the Sequence."
          type: array
          items:
            type: string
        viewingDirection:
          description: The direction that a sequence of canvases should be displayed to the user
          type: string
          enum:
            - right-to-left
            - left-to-right
    Source:
      description: Property model for indicating the vocabulary, authority, or
        other origin for a term, code, or identifier.
      type: object
      additionalProperties: false
      properties:
        code:
          description: Code representing the value source.
          type: string
        uri:
          description: URI for the value source.
          type: string
          format: uri
        value:
          description: String describing the value source.
          type: string
        note:
          description: Other information related to the value source.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        version:
          description: The version of the value source.
          type: string
    SourceId:
      type: string
      pattern: '^.+:.+$'
      description: >
        Unique identifier in some other system. This is because a large proportion of what is deposited in SDR,
        historically and currently, are representations of objects that are also represented in other systems.
        For example, digitized paper and A/V collections have physical manifestations, and those physical objects are managed
        in systems that have their own identifiers. Similarly, books have barcodes, archival materials have collection numbers
        and physical locations, etc. The sourceId allows determining if an item has been deposited before and where to
        look for the original item if you're looking at its SDR representation. The format is: "namespace:identifier"
      example: 'sul:PC0170_s3_Fiesta_Bowl_2012-01-02_210609_2026'
    Standard:
      description: Property model for indicating the encoding, standard, or syntax
        to which a value conforms (e.g. RDA).
      type: object
      additionalProperties: false
      properties:
        code:
          description: Code representing the standard or encoding.
          type: string
        uri:
          description: URI for the standard or encoding.
          type: string
          format: uri
        value:
          description: String describing the standard or encoding.
          type: string
        note:
          description: Other information related to the standard or encoding.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        version:
          description: The version of the standard or encoding.
          type: string
        source:
          $ref: "#/components/schemas/Source"
    StandardBarcode:
      description: The standard barcode associated with a DRO object, prefixed with 36105
      type: string
      nullable: true
      pattern: '^36105[0-9]{9}$'
      example: '36105010362304'
    StanfordAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          enum:
            - stanford
        download:
          description: Download access level.
          type: string
          enum:
            - stanford
        location:
          description: Not used for this access type, must be null.
          type: string
          nullable: true
          enum:
            - null
        controlledDigitalLending:
          type: boolean
          default: false
          enum:
            - false
      required:
        - view
        - download
    Title:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveValue"
        - anyOf:
            - type: object
              required:
                - value
            - type: object
              required:
                - structuredValue
            - type: object
              required:
                - parallelValue
            - type: object
              required:
                - groupedValue
            - type: object
              required:
                - valueAt
    WorldAccess:
      type: object
      properties:
        view:
          description: Access level.
          type: string
          enum:
            - world
        download:
          description: Download access level.
          type: string
          enum:
            - none
            - stanford
            - world
        location:
          description: Not used for this access type, must be null.
          type: string
          nullable: true
          enum:
            - null
        controlledDigitalLending:
          type: boolean
          default: false
          enum:
            - false
      required:
        - view
        - download
    AdministrativeTag:
      type: string
      pattern: '^.+( : .+)+$'
      example: 'Foo : Bar : Baz'
    AdministrativeTagEscaped:
      type: string
      # allow CGI-escaped and bare colons to allow for differences between local
      # environments and deployed environments that use Apache & Passenger
      pattern: '^.+(\+(?:%3A|:)\+.+)+$'
      example: 'Foo+%3A+Bar+%3A+Baz'
    Version:
      type: object
      description: 'Similar to the version inventory specified by OCFL: https://ocfl.io/draft/spec/#version-inventory'
      properties:
        versionId:
          type: integer
          description: the number of the version
        tag:
          type: string
          description: the number of the version
        message:
          type: string
          description: a message that explans what changed
    VersionLog:
      type: object
      description: 'Similar to the version inventory specified by OCFL: https://ocfl.io/draft/spec/#version-inventory'
      properties:
        versions:
          type: array
          items:
            $ref: '#/components/schemas/Version'
    BackgroundJobResultResponse:
      type: object
      properties:
        output:
          $ref: '#/components/schemas/ErrorResponse'
        status:
          type: string
          description: the status of the background job
          enum:
            - pending
            - processing
            - complete
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        title:
          type: string
          description: 'a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem.'
          example: Invalid Attribute
        detail:
          type: string
          description: a human-readable explanation specific to this occurrence of the problem.
          example: Title must contain at least three characters.
        meta:
          type: object
          description: used to include non-standard meta-information
          example: { backtrace: ['where things went wrong'] }
        source:
          type: object
          properties:
            pointer:
              type: string
              example: /data/attributes/title
    ObjectEvent:
      type: object
      required:
        - event_type
        - data
      properties:
        event_type:
          description: the type of event
          type: string
        data:
          description: details about the event
          type: object
    VirtualObjectRequest:
      type: object
      required:
        - virtual_object_id
        - constituent_ids
      properties:
        virtual_object_id:
          $ref: '#/components/schemas/Druid'
        constituent_ids:
          type: array
          items:
            $ref: '#/components/schemas/Druid'
    UpdateLegacyMetadata:
      type: object
      properties:
        administrative:
          $ref: '#/components/schemas/LegacyDatastream'
        descriptive:
          $ref: '#/components/schemas/LegacyDatastream'
        content:
          $ref: '#/components/schemas/LegacyDatastream'
        geo:
          $ref: '#/components/schemas/LegacyDatastream'
        identity:
          $ref: '#/components/schemas/LegacyDatastream'
        provenance:
          $ref: '#/components/schemas/LegacyDatastream'
        relationships:
          $ref: '#/components/schemas/LegacyDatastream'
        rights:
          $ref: '#/components/schemas/LegacyDatastream'
        technical:
          $ref: '#/components/schemas/LegacyDatastream'
        version:
          $ref: '#/components/schemas/LegacyDatastream'
    LegacyDatastream:
      type: object
      properties:
        updated:
          type: string
          format: date-time
          description: The date the xml was produced. This may be used to see if the server wants to accept this or if it already has a more recent version.
        content:
          type: string
          description: The XML datastream content
          example: <xmlDatastream>...</xmlDatastream>
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
