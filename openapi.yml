openapi: 3.0.0
info:
  description: Backend API for the Stanford digital repository
  version: 1.0.0
  title: DOR Services API
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://dor-services-{env}.stanford.edu'
    description: Production service
    variables:
      env:
        default: prod
  - url: 'https://dor-services-{env}.stanford.edu'
    description: Staging service
    variables:
      env:
        default: stage
tags:
  - name: objects
    description: Digital Repository Objects
  - name: tags
    description: Tags
  - name: integrations
    description: Integrations with other Systems
  - name: jobs
    description: Operations involving background jobs
  - name: versions
    description: Operations about object versions
  - name: events
    description: Operations about events
  - name: files
    description: Operations about files
  - name: workspaces
    description: Operations about workspaces
  - name: embargoes
    description: Operations about embargoes
paths:
  /v1/about:
    get:
      summary: A healthcheck endpoint
      responses:
        '200':
          description: The status of the service
  /v1/catalog/catkey:
    get:
      tags:
        - integrations
      summary: Lookup the catkey for an item given the barcode
      description: ''
      operationId: 'marcxml#catkey'
      responses:
        '200':
          description: OK
      parameters:
        - name: barcode
          in: query
          description: barcode of an item
          required: false
          schema:
            type: string
  /v1/catalog/marcxml:
    get:
      tags:
        - integrations
      summary: Lookup the MARC XML from Symphony
      description: ''
      operationId: 'marcxml#marcxml'
      responses:
        '200':
          description: OK
      parameters:
        - name: barcode
          in: query
          description: barcode of an item
          required: false
          schema:
            type: string
        - name: catkey
          in: query
          description: catalog identifier of an item
          required: false
          schema:
            type: string
  '/v1/background_job_results/{id}':
    get:
      tags:
        - jobs
      summary: View results of a background job
      description: Used to allow the application run long-running processes out of the request/response cycle
      operationId: 'background_job_results#show'
      responses:
        '200':
          description: The background job has completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundJobResultResponse'
        '202':
          description: The background job is pending or processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundJobResultResponse'
        '404':
          description: The background job with the given id was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: id
          in: path
          description: ID of background job result
          required: true
          schema:
            type: integer
  /v1/virtual_objects:
    post:
      tags:
        - objects
      summary: Create a virtual object.
      description: Combines a parent object with child objects to create an object like an Atlas (composed of several images)
      operationId: 'virtual_objects#create'
      responses:
        '201':
          description: Virtual merge action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - virtual_objects
              properties:
                virtual_objects:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/VirtualObjectRequest'
  '/v1/objects/{id}/publish':
    post:
      tags:
        - objects
      summary: Publish object to PURL
      description: ''
      operationId: 'objects#publish'
      responses:
        '201':
          description: Publishing action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: workflow
          in: query
          description: which workflow should this be reported to
          schema:
            type: string
            enum:
              - accessionWF
              - releaseWF
            example: releaseWF
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{id}/accession':
    post:
      tags:
        - objects
      summary: Start accessioning or re-accession an object to DOR
      description: ''
      operationId: 'objects#accession'
      responses:
        '201':
          description: Accessioning/re-accessioning started
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: workflow
          in: query
          description: which workflow should be started
          required: false
          schema:
            type: string
            default: assemblyWF
            enum:
              - accessionWF
              - assemblyWF
            example: assemblyWF
        - name: significance
          in: query
          description: the significance of the version change (if versioning is needed)
          required: false
          schema:
            type: string
            enum:
              - minor
              - major
              - admin
            example: Admin
        - name: description
          in: query
          description: the description of the version change (if versioning is needed)
          required: false
          schema:
            type: string
            example: 'Re-accessioning this object'
        - name: opening_user_name
          in: query
          description: the username of the person creating the version (if versioning is needed)
          schema:
            type: string
            example: 'some_sunetid'
  '/v1/objects/{id}/preserve':
    post:
      tags:
        - objects
      summary: Move an object to preservation
      description: ''
      operationId: 'objects#preserve'
      responses:
        '201':
          description: Preservation action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{id}/update_marc_record':
    post:
      tags:
        - integrations
      summary: Update Symphony with a new marc record from DOR
      description: ''
      operationId: 'objects#update_marc_record'
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{id}/notify_goobi':
    post:
      tags:
        - integrations
      summary: Registers an object with the Goobi server
      description: ''
      operationId: 'objects#notify_goobi'
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/release_tags':
    get:
      tags:
        - tags
      summary: Show release tags for an object and for all the collections that it belongs to.
      description: ''
      operationId: 'release_tags#show'
      responses:
        '200':
          description: OK
        '404':
          description: Object not found
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - tags
      summary: Assign the release tags
      description: ''
      operationId: 'release_tags#create'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        description: a release tag for an object
        content:
          application/json:
            schema:
              # Note that additionalProperties needs to be set to true to allow object_id parameter.
              $ref: '#/components/schemas/ReleaseTag'
  '/v1/objects/{object_id}/administrative_tags':
    get:
      tags:
        - tags
      summary: Show administrative tags for an object
      description: ''
      operationId: 'administrative_tags#show'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdministrativeTag'
        '404':
          description: Object not found
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - tags
      summary: Create (or replace) one or more administrative tags
      description: ''
      operationId: 'administrative_tags#create'
      responses:
        '201':
          description: Created
        '400':
          description: Bad request
        '404':
          description: Object not found
        '409':
          description: Request would result in a duplicate tag
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        description: one or more administrative tags for an object
        content:
          application/json:
            schema:
              type: object
              required:
                - administrative_tags
              properties:
                replace:
                  type: boolean
                  default: false
                administrative_tags:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/AdministrativeTag'
  '/v1/objects/{object_id}/administrative_tags/{id}':
    delete:
      tags:
        - tags
      summary: Delete an administrative tag for an object
      description: ''
      operationId: 'administrative_tags#destroy'
      responses:
        '204':
          description: Deleted
        '400':
          description: Bad request
        '404':
          description: Object or tag not found
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: id
          in: path
          description: ID of tag to remove
          required: true
          schema:
            $ref: '#/components/schemas/AdministrativeTagEscaped'
    put:
      tags:
        - tags
      summary: Update one administrative tag
      description: ''
      operationId: 'administrative_tags#update (PUT)'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad request
        '404':
          description: Object or tag not found
        '409':
          description: Request would result in a duplicate tag
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: id
          in: path
          description: ID of tag to replace
          required: true
          schema:
            $ref: '#/components/schemas/AdministrativeTagEscaped'
      requestBody:
        description: A replacement administrative tag
        content:
          application/json:
            schema:
              type: object
              required:
                - administrative_tag
              properties:
                administrative_tag:
                  $ref: '#/components/schemas/AdministrativeTag'
    patch:
      tags:
        - tags
      summary: Update one administrative tag
      description: ''
      operationId: 'administrative_tags#update (PATCH)'
      responses:
        '204':
          description: Updated
        '400':
          description: Bad request
        '404':
          description: Object or tag not found
        '409':
          description: Request would result in a duplicate tag
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: id
          in: path
          description: ID of tag to replace
          required: true
          schema:
            $ref: '#/components/schemas/AdministrativeTagEscaped'
      requestBody:
        description: A replacement administrative tag
        content:
          application/json:
            schema:
              type: object
              required:
                - administrative_tag
              properties:
                administrative_tag:
                  $ref: '#/components/schemas/AdministrativeTag'
  '/v1/objects/{id}/refresh_metadata':
    post:
      tags:
        - integrations
      summary: Update object metadata with marc from Symphony
      description: ''
      operationId: 'metadata_refresh#refresh_metadata'
      responses:
        '200':
          description: OK
        '422':
          description: Unprocessable entity.
        '500':
          description: Internal server error
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{id}/contents':
    get:
      tags:
        - files
      summary: List the files for a particular object
      description: ''
      operationId: 'content#list'
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{id}/contents/{path}':
    get:
      tags:
        - files
      summary: Retrieve file content from the DOR workspace
      description: ''
      operationId: 'content#read'
      responses:
        '200':
          description: OK
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: path
          in: path
          description: Name of the file
          required: true
          schema:
            type: string
  '/v1/objects/{object_id}/query/collections':
    get:
      tags:
        - objects
      summary: List the collections that an object belongs to
      description: ''
      operationId: 'queries#collections'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/members':
    get:
      tags:
        - objects
      summary: List the members of this collection
      description: ''
      operationId: 'members#index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  members:
                    type: array
                    items:
                      type: object
                      properties:
                        externalIdentifier:
                          $ref: '#/components/schemas/Druid'
                        type:

                          type: string
                          enum:
                            - 'item'
                            - 'collection'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/workspace':
    delete:
      tags:
        - workspaces
      summary: Remove an object's workspace
      description: ''
      operationId: 'workspaces#destroy'
      responses:
        '200':
          description: OK
        '422':
          description: There was a problem removing the workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - workspaces
      summary: Create a workspace for an object
      description: ''
      operationId: 'workspaces#create'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/workspace/reset':
    post:
      tags:
        - workspaces
      summary: Resets a workspace for an object
      description: After an object has been copied to preservation the workspace can be reset. This is called by the reset-workspace step of the accessionWF
      operationId: 'workspaces#reset'
      responses:
        '204':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/embargo':
    patch:
      tags:
        - embargoes
      summary: Update the embargo for an object
      description: ''
      operationId: 'embargoes#update'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/shelve':
    post:
      tags:
        - objects
      summary: Push the item to stacks
      description: ''
      operationId: 'shelves#create'
      responses:
        '201':
          description: Shelving action started
          headers:
            location:
              description: the status of the action is found at this URI
              schema:
                type: string
                format: uri
        '422':
          description: 'The object you provided was not a Dor::Item and could not be shelved'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: lane-id
          in: query
          description: Lane for prioritizing the work
          schema:
            type: string
            enum:
              - 'default'
              - 'low'
            default: 'default'
  '/v1/objects/{object_id}/metadata/legacy':
    patch:
      tags:
        - objects
      summary: Update the legacy (datastream) metadata for the object
      description: ''
      operationId: 'metadata#update_legacy_metadata'
      responses:
        '200':
          description: OK
        '503':
          description: Service unavailable when an error occurs saving to Fedora
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLegacyMetadata'
  '/v1/objects/{object_id}/metadata/dublin_core':
    get:
      tags:
        - objects
      summary: Retrieve the public Dublin Core metadata for the object
      description: ''
      operationId: 'metadata#dublin_core'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/metadata/descriptive':
    get:
      tags:
        - objects
      summary: Retrieve the public descriptive (MODS) metadata for the object
      description: ''
      operationId: 'metadata#descriptive'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/events':
    get:
      tags:
        - events
      summary: Return a list of events about this object
      description: ''
      operationId: 'events#index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectEvent'
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
    post:
      tags:
        - events
      summary: Create an event about this object
      description: ''
      operationId: 'events#create'
      responses:
        '201':
          description: Created
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        description: event to add to the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectEvent'
  '/v1/objects/{object_id}/versions/openable':
    get:
      tags:
        - versions
      summary: Query to determine whether a version can be opened for this object
      description: ''
      operationId: 'versions#openable'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/versions/current':
    get:
      tags:
        - versions
      summary: Return the current version number for this object
      description: ''
      operationId: 'versions#current'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  '/v1/objects/{object_id}/versions/current/close':
    post:
      tags:
        - versions
      summary: Close the currently open version for this object
      description: ''
      operationId: 'versions#close_current'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
        - name: start_accession
          in: query
          schema:
            type: boolean
            default: true
          required: false
          description: Indicates if accessionWF should be started after closing the version
  '/v1/objects/{object_id}/versions':
    post:
      tags:
        - versions
      summary: Open a new version for this object
      description: ''
      operationId: 'versions#create'
      responses:
        '200':
          description: OK
      parameters:
        - name: object_id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
  /v1/objects:
    post:
      tags:
        - objects
      summary: Register a new object
      description: |-
        If 'pid' is provided, this value will be used as the object
        id, otherwise a new identifier will be minted.

        If 'collection' is provided, the object will be a member of the provided
        collection.

        Note that the 'source_id' property is required for items but not for
        collections.
      operationId: 'objects#create'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/RequestDRO'
                - $ref: '#/components/schemas/RequestCollection'
                - $ref: '#/components/schemas/RequestAdminPolicy'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid DOR parameter
        '404':
          description: Object not found in DOR
        '409':
          description: Object with that sourceId already exists
        '500':
          description: Server error
        '502':
          description: Error connecting to Symphony
  '/v1/objects/{id}':
    patch:
      tags:
        - objects
      summary: Update object metadata
      description: |-
        Replace the object metadata with the provided metadata.

        Since we don't presently have a full mapping between cocina JSON and MODS,
        only the title can be updated in the descriptive metadata.
      operationId: 'objects#update'
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
      requestBody:
        required: true
        content:
          application/json:
            # Note that additionalProperties needs to be set to true to allow id parameter.
            schema:
              oneOf:
                - $ref: '#/components/schemas/DRO'
                - $ref: '#/components/schemas/Collection'
                - $ref: '#/components/schemas/AdminPolicy'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid DOR parameter
        '404':
          description: Object not found in DOR
        '409':
          description: Object with that sourceId already exists
        '500':
          description: Server error
    get:
      tags:
        - objects
      summary: Retrieve the object COCINA metadata
      description: 'Returns a JSON representation (not yet complete) of an object, collection or admin policy.'
      operationId: 'objects#show'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DRO'
                  - $ref: '#/components/schemas/Collection'
                  - $ref: '#/components/schemas/AdminPolicy'
      parameters:
        - name: id
          in: path
          description: ID of object
          required: true
          schema:
            $ref: '#/components/schemas/Druid'
components:
  schemas:
    Access:
      description: Access metadata
      type: object
      additionalProperties: false
      properties:
        access:
          description: Access level
          type: string
          enum:
            - 'world'
            - 'stanford'
            - 'location-based'
            - 'citation-only'
            - 'dark'
          default: 'dark'
        download:
          description: Download access level for a file
          type: string
          enum:
            - 'world'
            - 'stanford'
            - 'location-based'
            - 'none'
          default: 'none'
        readLocation:
          description: If access is "location-based", which location should have access.
          type: string
          enum:
            - 'spec'
            - 'music'
            - 'ars'
            - 'art'
            - 'hoover'
            - 'm&m'
    Administrative:
      type: object
      additionalProperties: false
      properties:
        hasAdminPolicy:
          $ref: '#/components/schemas/Druid'
        releaseTags:
          description: Tags for release
          type: array
          items:
            $ref: '#/components/schemas/ReleaseTag'
        partOfProject:
          description: Administrative or Internal project this resource is a part of
          example: Google Books
          type: string
    AdminPolicy:
      type: object
      additionalProperties: true
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/admin_policy.jsonld'
          example: item
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          type: string
        version:
          type: integer
        administrative:
          $ref: '#/components/schemas/AdminPolicyAdministrative'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - externalIdentifier
        - label
        - type
        - version
        - administrative
    AdminPolicyAdministrative:
      type: object
      additionalProperties: false
      properties:
        defaultObjectRights:
          type: string
          default: <?xml version="1.0" encoding="UTF-8"?><rightsMetadata><access type="discover"><machine><world/></machine></access><access type="read"><machine><world/></machine></access><use><human type="useAndReproduction"/><human type="creativeCommons"/><machine type="creativeCommons" uri=""/><human type="openDataCommons"/><machine type="openDataCommons" uri=""/></use><copyright><human/></copyright></rightsMetadata>
        registrationWorkflow:
          type: string
        hasAdminPolicy:
          type: string
    AppliesTo:
      description: Property model for indicating the parts, aspects, or versions of the resource to which a
        descriptive element is applicable.
      type: object
      additionalProperties: false
      properties:
        appliesTo:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveBasicValue"
    CatalogLink:
      type: object
      additionalProperties: false
      required:
        - catalog
        - catalogRecordId
      properties:
        catalog:
          description: Catalog that is the source of the linked record.
          type: string
          example: symphony
        catalogRecordId:
          description: Record identifier that is unique within the context of the linked record's catalog.
          type: string
          example: 11403803
    Collection:
      description: A group of Digital Repository Objects that indicate some type of conceptual grouping within the domain that is worth reusing across the system.
      type: object
      additionalProperties: true
      properties:
        type:
          description: The content type of the Collection. Selected from an established set of values.
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/collection.jsonld'
            - 'http://cocina.sul.stanford.edu/models/curated-collection.jsonld'
            - 'http://cocina.sul.stanford.edu/models/user-collection.jsonld'
            - 'http://cocina.sul.stanford.edu/models/exhibit.jsonld'
            - 'http://cocina.sul.stanford.edu/models/series.jsonld'
          example: item
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          description: Primary processing label (can be same as title) for a Collection.
          type: string
        version:
          description: Version for the Collection within SDR.
          type: integer
        access:
          $ref: '#/components/schemas/Access'
        administrative:
          $ref: '#/components/schemas/Administrative'
        description:
          $ref: '#/components/schemas/Description'
        identification:
          $ref: '#/components/schemas/CollectionIdentification'
      required:
        - externalIdentifier
        - label
        - type
        - version
        - access
    CollectionIdentification:
      type: object
      additionalProperties: false
      properties:
        catalogLinks:
          type: array
          items:
            $ref: '#/components/schemas/CatalogLink'
    Contributor:
      description: Property model for describing agents contributing in some way to
        the creation and history of the resource
      type: object
      additionalProperties: false
      properties:
        name:
          description: Names associated with a contributor.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        type:
          description: Entity type of the contributor (person, organization, etc.).
          type: string
        status:
          description: Status of the contributor relative to other parallel contributors.
          type: string
        role:
          description: Relationships of the contributor to the resource or to an event
            in its history.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveAdminMetadata:
      description: Information about this description of the resource.
      type: object
      additionalProperties: false
      properties:
        contributor:
          type: array
          items:
            $ref: "#/components/schemas/Contributor"
        event:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        language:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        note:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
    DescriptiveBasicValue:
      description: Value model for descriptive elements without recursive properties.
      type: object
      additionalProperties: false
      properties:
        value:
          description: String value of the descriptive element.
          type: string
        type:
          description: Type of value provided by the descriptive element.
          type: string
        status:
          description: Status of the descriptive element relative to other instances
            of the element.
          type: string
        code:
          description: Code value of the descriptive element.
          type: string
        uri:
          description: URI value of the descriptive element.
          type: string
          format: uri
        standard:
          description: Descriptive or content standard to which the value conforms.
          type: array
          items:
            type: string
        encoding:
          description: Encoding schema, standard, or syntax to which the value conforms.
          type: array
          items:
            type: string
        source:
          $ref: "#/components/schemas/Source"
    DescriptiveStructuredValue:
      description: Value model for descriptive elements structured as typed values.
      type: object
      additionalProperties: false
      properties:
        structuredValue:
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveBasicValue"
    DescriptiveValue:
      description: Default value model for descriptive elements.
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveBasicValue"
        - $ref: "#/components/schemas/DescriptiveStructuredValue"
        - $ref: "#/components/schemas/AppliesTo"
    DescriptiveValueRequired:
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveValue"
        - anyOf:
            - type: object
              required:
                - value
            - type: object
              required:
                - structuredValue
    Description:
      type: object
      additionalProperties: false
      properties:
        title:
          description: Titles of the resource.
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/DescriptiveValueRequired"
        contributor:
          description: Agents contributing in some way to the creation and history of the
            resource.
          type: array
          items:
            $ref: "#/components/schemas/Contributor"
        event:
          description: Events in the history of the resource.
          type: array
          items:
            $ref: "#/components/schemas/Event"
        form:
          description: Characteristics of the resource's physical, digital, and intellectual
            form and genre.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        language:
          description: Languages, scripts, and notations used in all or part of a resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        note:
          description: Additional information relevant to a resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        identifier:
          description: Unique strings associated with the resource.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        purl:
          description: Stanford persistent URL associated with the resource.
          type: string
          format: uri
        url:
          description: URLs where the resource may be accessed in full or part.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        marcEncodedData:
          description: Data about the resource represented in MARC fixed fields and codes.
          type: array
          items:
            $ref: "#/components/schemas/DescriptiveValue"
        adminMetadata:
          $ref: "#/components/schemas/DescriptiveAdminMetadata"
      required:
        - title
    DRO:
      description: Domain-defined abstraction of a 'work'. Digital Repository Objects' abstraction is describable for our domain’s purposes, i.e. for management needs within our system.
      type: object
      additionalProperties: true
      properties:
        type:
          description: The content type of the DRO. Selected from an established set of values.
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/object.jsonld'
            - 'http://cocina.sul.stanford.edu/models/3d.jsonld'
            - 'http://cocina.sul.stanford.edu/models/agreement.jsonld'
            - 'http://cocina.sul.stanford.edu/models/book.jsonld'
            - 'http://cocina.sul.stanford.edu/models/document.jsonld'
            - 'http://cocina.sul.stanford.edu/models/geo.jsonld'
            - 'http://cocina.sul.stanford.edu/models/image.jsonld'
            - 'http://cocina.sul.stanford.edu/models/page.jsonld'
            - 'http://cocina.sul.stanford.edu/models/photograph.jsonld'
            - 'http://cocina.sul.stanford.edu/models/manuscript.jsonld'
            - 'http://cocina.sul.stanford.edu/models/map.jsonld'
            - 'http://cocina.sul.stanford.edu/models/media.jsonld'
            - 'http://cocina.sul.stanford.edu/models/track.jsonld'
            - 'http://cocina.sul.stanford.edu/models/webarchive-binary.jsonld'
            - 'http://cocina.sul.stanford.edu/models/webarchive-seed.jsonld'
          example: item
        externalIdentifier:
          $ref: '#/components/schemas/Druid'
        label:
          description: Primary processing label (can be same as title) for a DRO.
          type: string
        version:
          description: Version for the DRO within SDR.
          type: integer
        access:
          $ref: '#/components/schemas/DROAccess'
        administrative:
          $ref: '#/components/schemas/Administrative'
        description:
          $ref: '#/components/schemas/Description'
        identification:
          $ref: '#/components/schemas/Identification'
        structural:
          $ref: '#/components/schemas/DROStructural'
        geographic:
          $ref: '#/components/schemas/Geographic'
      required:
        - externalIdentifier
        - label
        - type
        - version
        - access
    DROAccess:
      type: object
      additionalProperties: false
      properties:
        access:
          type: string
          enum:
            - 'world'
            - 'stanford'
            - 'location-based'
            - 'citation-only'
            - 'dark'
          default: 'dark'
        copyright:
          description: The human readable copyright statement that applies
          example: Copyright World Trade Organization
          type: string
        embargo:
          $ref: '#/components/schemas/Embargo'
        download:
          description: >
            Download access level. This is used in the transition from Fedora as
            a way to set a default download level at registration that is copied
            down to all the files.

          type: string
          enum:
            - 'world'
            - 'stanford'
            - 'location-based'
            - 'none'
          default: 'none'
        readLocation:
          description: >
            If access is "location-based", which location should have access.
            This is used in the transition from Fedora as a way to set a default
            readLocation at registration that is copied down to all the files.

          type: string
          enum:
            - 'spec'
            - 'music'
            - 'ars'
            - 'art'
            - 'hoover'
            - 'm&m'
        useAndReproductionStatement:
          description: The human readable use and reproduction statement that applies
          example: Property rights reside with the repository. Literary rights reside with the creators of the documents or their heirs. To obtain permission to publish or reproduce, please contact the Public Services Librarian of the Dept. of Special Collections (http://library.stanford.edu/spc).
          type: string
    DROStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          description: Filesets that contain the digital representations (Files)
          type: array
          items:
            $ref: '#/components/schemas/FileSet'
        hasMemberOrders:
          description: Provided sequences or orderings of members, including some metadata about each sequence (i.e. sequence label, sequence type, if the sequence is primary, etc.).
          type: array
          items:
            $ref: '#/components/schemas/Sequence'
        isMemberOf:
          $ref: '#/components/schemas/Druid'
        hasAgreement:
          description: Agreement that covers the deposit of the DRO into SDR.
          type: string
    Druid:
      type: string
      pattern: '^druid:[b-df-hjkmnp-tv-z]{2}[0-9]{3}[b-df-hjkmnp-tv-z]{2}[0-9]{4}$'
      example: 'druid:bc123df4567'
    Embargo:
      type: object
      additionalProperties: false
      properties:
        releaseDate:
          description: Date when the Collection is released from an embargo.
          type: string
          format: date-time
          example: '2029-06-22T07:00:00.000+00:00'
        access:
          description: Access level that applies when embargo expires.
          type: string
          enum:
            - world
            - stanford
            - location-based
            - citation-only
            - dark
        useAndReproductionStatement:
          description: The human readable use and reproduction statement that applies when the embargo expires.
          example: These materials are in the public domain.
          type: string
      required:
        - releaseDate
        - access
    Event:
      description: Property model for describing events in the history of the resource.
      type: object
      additionalProperties: false
      allOf:
        - $ref: "#/components/schemas/DescriptiveStructuredValue"
        - type: object
          additionalProperties: false
          properties:
            type:
              description: Description of the event (creation, publication, etc.).
              type: string
            date:
              description: Dates associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            contributor:
              description: Contributors associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/Contributor"
            location:
              description: Locations associated with the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"
            note:
              description: Other information about the event.
              type: array
              items:
                $ref: "#/components/schemas/DescriptiveValue"

    File:
      description: Binaries that are the basis of what our domain manages. Binaries here do not include metadata files generated for the domain's own management purposes.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The content type of the File.
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/file.jsonld'
        externalIdentifier:
          description: Identifier for the resource within the SDR architecture but outside of the repository. UUID. Constant across resource versions. What clients will use calling the repository.
          type: string
        label:
          description: Primary processing label (can be same as title) for a File.
          type: string
        filename:
          description: Filename for a file. Can be same as label.
          type: string
        size:
          description: Size of the File (binary) in bytes.
          type: integer
        version:
          description: Version for the File within SDR.
          type: integer
        hasMimeType:
          description: MIME Type of the File.
          type: string
        use:
          description: Use for the File.
          type: string
        hasMessageDigests:
          type: array
          items:
            $ref: '#/components/schemas/MessageDigest'
        access:
          $ref: '#/components/schemas/Access'
        administrative:
          $ref: '#/components/schemas/FileAdministrative'
        presentation:
          $ref: '#/components/schemas/Presentation'
      required:
        - externalIdentifier
        - label
        - type
        - version
        - access
        - administrative
        - hasMessageDigests
    FileAdministrative:
      type: object
      additionalProperties: false
      properties:
        sdrPreserve:
          type: boolean
          default: true
        shelve:
          type: boolean
          default: false
      required:
        - sdrPreserve
        - shelve
    FileSet:
      description: Relevant groupings of Files. Also called a File Grouping.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The content type of the Fileset.
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/fileset.jsonld'
        externalIdentifier:
          type: string
        label:
          description: Primary processing label for a Fileset.
          type: string
        version:
          description: Version for the Fileset within SDR.
          type: integer
        structural:
          $ref: '#/components/schemas/FileSetStructural'
      required:
        - externalIdentifier
        - label
        - type
        - version
    FileSetStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          type: array
          items:
            $ref: '#/components/schemas/File'
    Geographic:
      description: Geographic metadata
      type: object
      additionalProperties: false
      properties:
        iso19139:
          description: Geographic ISO 19139 XML metadata
          type: string
      required:
        - iso19139
    Identification:
      type: object
      additionalProperties: false
      properties:
        sourceId:
          type: string
          example: 'sul:PC0170_s3_Fiesta_Bowl_2012-01-02_210609_2026'
        catalogLinks:
          type: array
          items:
            $ref: '#/components/schemas/CatalogLink'
    MessageDigest:
      description: The output of the message digest algorithm.
      type: object
      additionalProperties: false
      properties:
        type:
          description: The algorithm that was used
          type: string
          enum:
            - md5
            - sha1
        digest:
          description: The digest value Base64 encoded
          type: string
      required:
        - type
        - digest
    Presentation:
      description: Presentation data for the File.
      type: object
      additionalProperties: false
      properties:
        height:
          description: Height in pixels
          type: integer
        width:
          description: Width in pixels
          type: integer
    ReleaseTag:
      description: A tag that indicates the item or collection should be released.
      type: object
      additionalProperties: true
      required:
        - release
      properties:
        who:
          description: Who did this release
          type: string
          example: petucket
        what:
          description: What is being released. This item or the whole collection.
          type: string
          enum:
            - self
            - collection
          example: self
        date:
          description: When did this action happen
          type: string
          format: date-time
        to:
          description: What platform is it released to
          type: string
          example: Searchworks
        release:
          type: boolean
    RequestAdminPolicy:
      description: Same as an AdminPolicy, but doesn't have an externalIdentifier as one will be created
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/admin_policy.jsonld'
          example: item
        label:
          type: string
        version:
          type: integer
        administrative:
          $ref: '#/components/schemas/AdminPolicyAdministrative'
        description:
          $ref: '#/components/schemas/Description'
      required:
        - label
        - type
        - version
        - administrative
    RequestCollection:
      description: Same as a Collection, but doesn't have an externalIdentifier as one will be created
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/collection.jsonld'
            - 'http://cocina.sul.stanford.edu/models/curated-collection.jsonld'
            - 'http://cocina.sul.stanford.edu/models/user-collection.jsonld'
            - 'http://cocina.sul.stanford.edu/models/exhibit.jsonld'
            - 'http://cocina.sul.stanford.edu/models/series.jsonld'
          example: item
        label:
          type: string
        version:
          type: integer
        access:
          $ref: '#/components/schemas/Access'
        administrative:
          $ref: '#/components/schemas/Administrative'
        description:
          $ref: '#/components/schemas/Description'
        identification:
          $ref: '#/components/schemas/CollectionIdentification'
      required:
        - label
        - type
        - version
        - access
    RequestDRO:
      description: A request to create a DRO.  This has the same general structure as a DRO but doesn't have externalIdentifier and doesn't require the access subschema. If no access subschema is provided, these values will be inherited from the AdminPolicy.
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/object.jsonld'
            - 'http://cocina.sul.stanford.edu/models/3d.jsonld'
            - 'http://cocina.sul.stanford.edu/models/agreement.jsonld'
            - 'http://cocina.sul.stanford.edu/models/book.jsonld'
            - 'http://cocina.sul.stanford.edu/models/document.jsonld'
            - 'http://cocina.sul.stanford.edu/models/geo.jsonld'
            - 'http://cocina.sul.stanford.edu/models/image.jsonld'
            - 'http://cocina.sul.stanford.edu/models/page.jsonld'
            - 'http://cocina.sul.stanford.edu/models/photograph.jsonld'
            - 'http://cocina.sul.stanford.edu/models/manuscript.jsonld'
            - 'http://cocina.sul.stanford.edu/models/map.jsonld'
            - 'http://cocina.sul.stanford.edu/models/media.jsonld'
            - 'http://cocina.sul.stanford.edu/models/track.jsonld'
            - 'http://cocina.sul.stanford.edu/models/webarchive-binary.jsonld'
            - 'http://cocina.sul.stanford.edu/models/webarchive-seed.jsonld'
          example: item
        label:
          type: string
        version:
          type: integer
        access:
          $ref: '#/components/schemas/DROAccess'
        administrative:
          $ref: '#/components/schemas/Administrative'
        description:
          $ref: '#/components/schemas/Description'
        identification:
          $ref: '#/components/schemas/Identification'
        structural:
          $ref: '#/components/schemas/RequestDROStructural'
        geographic:
          $ref: '#/components/schemas/Geographic'
      required:
        - label
        - type
        - version
    RequestDROStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          type: array
          items:
            $ref: '#/components/schemas/RequestFileSet'
        hasMemberOrders:
          type: array
          items:
            $ref: '#/components/schemas/Sequence'
        isMemberOf:
          $ref: '#/components/schemas/Druid'
        hasAgreement:
          type: string
    RequestFile:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/file.jsonld'
        label:
          type: string
        filename:
          type: string
        size:
          type: integer
        version:
          type: integer
        hasMimeType:
          type: string
        externalIdentifier:
          type: string
        use:
          type: string
        hasMessageDigests:
          type: array
          items:
            $ref: '#/components/schemas/MessageDigest'
        access:
          $ref: '#/components/schemas/Access'
        administrative:
          $ref: '#/components/schemas/FileAdministrative'
        presentation:
          $ref: '#/components/schemas/Presentation'
      required:
        - label
        - type
        - version
        - filename
        - access
        - administrative
        - hasMessageDigests
    RequestFileSet:
      type: object
      additionalProperties: false
      properties:
        type:
          type: string
          enum:
            - 'http://cocina.sul.stanford.edu/models/fileset.jsonld'
        label:
          type: string
        version:
          type: integer
        structural:
          $ref: '#/components/schemas/RequestFileSetStructural'
      required:
        - label
        - type
        - version
        - structural
    RequestFileSetStructural:
      description: Structural metadata
      type: object
      additionalProperties: false
      properties:
        contains:
          type: array
          items:
            $ref: '#/components/schemas/RequestFile'
    Sequence:
      description: A sequence or ordering of resources within a Collection or Object.
      type: object
      additionalProperties: false
      properties:
        viewingDirection:
          description: The direction that a sequence of canvases should be displayed to the user
          type: string
          enum:
            - right-to-left
            - left-to-right
    Source:
      description: Property model for indicating the vocabulary, authority, or other
        origin for a term, code, or identifier.
      type: object
      additionalProperties: false
      properties:
        code:
          description: Code representing the value source.
          type: string
        uri:
          description: URI for the value source.
          type: string
          format: uri
        value:
          description: String describing the value source.
          type: string
    AdministrativeTag:
      type: string
      pattern: '^.+( : .+)+$'
      example: 'Foo : Bar : Baz'
    AdministrativeTagEscaped:
      type: string
      # allow CGI-escaped and bare colons to allow for differences between local
      # environments and deployed environments that use Apache & Passenger
      pattern: '^.+(\+(?:%3A|:)\+.+)+$'
      example: 'Foo+%3A+Bar+%3A+Baz'
    BackgroundJobResultResponse:
      type: object
      properties:
        output:
          $ref: '#/components/schemas/ErrorResponse'
        status:
          type: string
          description: the status of the background job
          enum:
            - pending
            - processing
            - complete
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        title:
          type: string
          description: 'a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem.'
          example: Invalid Attribute
        detail:
          type: string
          description: a human-readable explanation specific to this occurrence of the problem.
          example: Title must contain at least three characters.
        source:
          type: object
          properties:
            pointer:
              type: string
              example: /data/attributes/title
    ObjectEvent:
      type: object
      required:
        - event_type
        - data
      properties:
        event_type:
          description: the type of event
          type: string
        data:
          description: details about the event
          type: object
    VirtualObjectRequest:
      type: object
      required:
        - parent_id
        - child_ids
      properties:
        parent_id:
          $ref: '#/components/schemas/Druid'
        child_ids:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Druid'
    UpdateLegacyMetadata:
      type: object
      properties:
        descriptive:
          $ref: '#/components/schemas/LegacyDatastream'
        rights:
          $ref: '#/components/schemas/LegacyDatastream'
        content:
          $ref: '#/components/schemas/LegacyDatastream'
        technical:
          $ref: '#/components/schemas/LegacyDatastream'
        identity:
          $ref: '#/components/schemas/LegacyDatastream'
        provenance:
          $ref: '#/components/schemas/LegacyDatastream'
    LegacyDatastream:
      type: object
      properties:
        updated:
          type: string
          format: date-time
          description: The date the xml was produced. This may be used to see if the server wants to accept this or if it already has a more recent version.
        content:
          type: string
          description: The XML datastream content
          example: <xmlDatastream>...</xmlDatastream>
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
